#!/usr/bin/env python3
"""
üöÄ –ï–î–ò–ù–´–ô –ó–ê–ü–£–°–ö SWARMIND –° –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ú –ò–ù–¢–ï–†–§–ï–ô–°–û–ú üöÄ

–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É SwarmMind —Å –µ–¥–∏–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º:
1. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –Ω–µ–π—Ä–æ–Ω–∞–º–∏
2. –ï–¥–∏–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + —ç–≤–æ–ª—é—Ü–∏—è + –ª–æ–≥–∏ + –∏–Ω—Å–∞–π—Ç—ã + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
3. –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
4. –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–¢–µ–ø–µ—Ä—å –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ - —É–¥–æ–±–Ω–æ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ!
"""

import asyncio
import subprocess
import time
import threading
import signal
import sys
import os
import webbrowser
from pathlib import Path

class UnifiedSwarmMind:
    def __init__(self):
        self.processes = []
        self.running = True
        self.interface_port = 5000

    def print_banner(self):
        print("üåå" + "=" * 60 + "üåå")
        print("üöÄ        SWARMIND UNIFIED SYSTEM        üöÄ")
        print("üß¨      SELF-EVOLVING AI NETWORK         üß¨")
        print("‚ö°      TECHNOLOGICAL SINGULARITY        ‚ö°")
        print("üåê         UNIFIED INTERFACE             üåê")
        print("üåå" + "=" * 60 + "üåå")
        print()

    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        print("üîç [CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ [CHECK] Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå [CHECK] Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå [CHECK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
        try:
            result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ [CHECK] Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå [CHECK] Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå [CHECK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            import flask
            import psutil
            import matplotlib
            import numpy
            print("‚úÖ [CHECK] Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå [CHECK] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            return False

        print("‚úÖ [CHECK] –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return True

    def start_docker_containers(self):
        """–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        print("üê≥ [DOCKER] –ó–∞–ø—É—Å–∫ SwarmMind –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            subprocess.run(['docker-compose', 'down'], capture_output=True, timeout=30)
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run(
                ['docker-compose', 'up', '-d'], 
                capture_output=True, 
                text=True, 
                timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                print("‚úÖ [DOCKER] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            else:
                print(f"‚ùå [DOCKER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå [DOCKER] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return False
        except Exception as e:
            print(f"‚ùå [DOCKER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
            return False

    def start_unified_interface(self):
        """–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üåê [INTERFACE] –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            process = subprocess.Popen(
                [sys.executable, 'unified_interface.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            self.processes.append(process)
            print("‚úÖ [INTERFACE] –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå [INTERFACE] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return False

    def start_evolution_system(self):
        """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üß¨ [EVOLUTION] –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(
                [sys.executable, 'scripts/run_evolution.py', 'demo'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            self.processes.append(process)
            print("‚úÖ [EVOLUTION] –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå [EVOLUTION] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
            return False

    def open_browser(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        print("üåê [BROWSER] –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        
        try:
            time.sleep(3)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            webbrowser.open(f'http://localhost:{self.interface_port}')
            print("‚úÖ [BROWSER] –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ùå [BROWSER] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    def start_monitoring(self):
        """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä [MONITORING] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        def monitoring_loop():
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    for i, process in enumerate(self.processes):
                        if process.poll() is not None:
                            print(f"‚ö†Ô∏è [MONITORING] –ü—Ä–æ—Ü–µ—Å—Å {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    
                    time.sleep(10)
                except Exception as e:
                    print(f"‚ùå [MONITORING] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(30)
        
        monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
        monitoring_thread.start()
        print("‚úÖ [MONITORING] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        print("\nüõë [SHUTDOWN] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.running = False
        self.shutdown()

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üõë [SHUTDOWN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=10)
            except:
                process.kill()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        try:
            subprocess.run(['docker-compose', 'down'], capture_output=True, timeout=30)
            print("‚úÖ [SHUTDOWN] Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå [SHUTDOWN] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker: {e}")
        
        print("‚úÖ [SHUTDOWN] –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.print_banner()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not self.check_prerequisites():
            print("‚ùå [ERROR] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            return False
        
        print("üöÄ [START] –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–π SwarmMind —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        if not self.start_docker_containers():
            print("‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã!")
            print("üí° [TIP] –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Desktop –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if not self.start_unified_interface():
            print("‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if not self.start_evolution_system():
            print("‚ö†Ô∏è [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
            print("üí° [TIP] –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç–≤–æ–ª—é—Ü–∏–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_monitoring()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        self.open_browser()
        
        print("\nüåü [SUCCESS] SwarmMind —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print(f"üåê [ACCESS] –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{self.interface_port}")
        print("üìä [FEATURES] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (CPU, –ø–∞–º—è—Ç—å, Docker)")
        print("   ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ (–≥—Ä–∞—Ñ–∏–∫–∏)")
        print("   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π")
        print("   ‚Ä¢ AI-–∏–Ω—Å–∞–π—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑")
        print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)")
        print("\nüîÑ [INFO] –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
        print("üõë [INFO] –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë [INTERRUPT] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            self.shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        system = UnifiedSwarmMind()
        system.run()
    except Exception as e:
        print(f"‚ùå [FATAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 