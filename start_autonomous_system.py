#!/usr/bin/env python3
"""
üöÄ –ê–í–¢–û–ù–û–ú–ù–´–ô –ó–ê–ü–£–°–ö SWARMIND üöÄ

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é SwarmMind —Å–∏—Å—Ç–µ–º—É –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ:
1. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –Ω–µ–π—Ä–æ–Ω–∞–º–∏
2. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
3. –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
4. –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

import asyncio
import subprocess
import time
import threading
import signal
import sys
import os
from pathlib import Path

class AutonomousSwarmMind:
    def __init__(self):
        self.processes = []
        self.running = True
        self.web_interface_port = 5000
        
    def print_banner(self):
        """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–ø—É—Å–∫–∞"""
        print("üåå" + "="*60 + "üåå")
        print("üöÄ           SWARMIND AUTONOMOUS SYSTEM           üöÄ")
        print("üß¨         SELF-EVOLVING AI NETWORK              üß¨")
        print("‚ö°         TECHNOLOGICAL SINGULARITY             ‚ö°")
        print("üåå" + "="*60 + "üåå")
        print()
        
    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        print("üîç [CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print("‚úÖ [CHECK] Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå [CHECK] Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
        except Exception as e:
            print(f"‚ùå [CHECK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
        try:
            result = subprocess.run(['docker-compose', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print("‚úÖ [CHECK] Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå [CHECK] Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
        except Exception as e:
            print(f"‚ùå [CHECK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose: {e}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            import flask
            import psutil
            import requests
            print("‚úÖ [CHECK] Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå [CHECK] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
            return False
            
        print("‚úÖ [CHECK] –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return True
        
    def start_docker_containers(self):
        """–ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        print("üê≥ [DOCKER] –ó–∞–ø—É—Å–∫ SwarmMind –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            subprocess.run(['docker-compose', 'down'], 
                         capture_output=True, text=True, timeout=30)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(
                ['docker-compose', 'up', '--build', '-d'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
            stdout, stderr = process.communicate(timeout=120)
            
            if process.returncode == 0:
                print("‚úÖ [DOCKER] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                time.sleep(5)
                result = subprocess.run(['docker-compose', 'ps'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    print("üìä [DOCKER] –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
                    print(result.stdout)
                
                return True
            else:
                print(f"‚ùå [DOCKER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå [DOCKER] –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return False
        except Exception as e:
            print(f"‚ùå [DOCKER] –û—à–∏–±–∫–∞: {e}")
            return False
            
    def start_web_interface(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üåê [WEB] –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        try:
            process = subprocess.Popen(
                [sys.executable, 'web_interface.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            if process.poll() is None:
                print(f"‚úÖ [WEB] –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{self.web_interface_port}")
                self.processes.append(('web_interface', process))
                return True
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå [WEB] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå [WEB] –û—à–∏–±–∫–∞: {e}")
            return False
            
    def start_evolution_system(self):
        """–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üß¨ [EVOLUTION] –ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            process = subprocess.Popen(
                [sys.executable, 'scripts/run_evolution.py', 'full'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)
            
            if process.poll() is None:
                print("‚úÖ [EVOLUTION] –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
                self.processes.append(('evolution', process))
                return True
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå [EVOLUTION] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå [EVOLUTION] –û—à–∏–±–∫–∞: {e}")
            return False
            
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üìä [MONITOR] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        def monitoring_loop():
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    result = subprocess.run(['docker-compose', 'ps'], 
                                          capture_output=True, text=True, timeout=10)
                    if result.returncode == 0:
                        running_containers = result.stdout.count('running')
                        if running_containers > 0:
                            print(f"üìä [MONITOR] –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {running_containers}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    import requests
                    try:
                        response = requests.get(f"http://localhost:{self.web_interface_port}/api/status", 
                                              timeout=5)
                        if response.status_code == 200:
                            print("‚úÖ [MONITOR] –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    except:
                        print("‚ö†Ô∏è [MONITOR] –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è [MONITOR] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
        monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
        monitoring_thread.start()
        print("‚úÖ [MONITOR] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë [SHUTDOWN] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.shutdown()
        
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ [SHUTDOWN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name, process in self.processes:
            print(f"üõë [SHUTDOWN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
            try:
                process.terminate()
                process.wait(timeout=10)
            except:
                process.kill()
                
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        print("üõë [SHUTDOWN] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        try:
            subprocess.run(['docker-compose', 'down'], 
                         capture_output=True, text=True, timeout=30)
        except:
            pass
            
        print("‚úÖ [SHUTDOWN] –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.print_banner()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not self.check_prerequisites():
            print("‚ùå [ERROR] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            return False
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        print("üöÄ [START] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π SwarmMind —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if not self.start_docker_containers():
            print("‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã!")
            return False
            
        if not self.start_web_interface():
            print("‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!")
            return False
            
        if not self.start_evolution_system():
            print("‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É!")
            return False
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_monitoring()
        
        print("\n" + "="*60)
        print("üéâ [SUCCESS] SwarmMind –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("="*60)
        print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{self.web_interface_port}")
        print("üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose ps")
        print("üß¨ –≠–≤–æ–ª—é—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∞–∫—Ç–∏–≤–µ–Ω")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë [INTERRUPT] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
            self.shutdown()
            
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    autonomous_system = AutonomousSwarmMind()
    success = autonomous_system.run()
    
    if success:
        print("üåü [COMPLETE] –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!")
        sys.exit(1)

if __name__ == "__main__":
    main() 