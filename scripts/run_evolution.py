#!/usr/bin/env python3
# The MIT License (MIT)
# Copyright ¬© 2025 <kisa134>

"""
üß¨ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ó–ê–ü–£–°–ö SWARMIND üß¨

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - 
–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º–æ—É–ª—É—á—à–∞—é—â—É—é—Å—è —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è:

1. üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
2. üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM
3. üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–π –∫–æ–¥
4. üöÄ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
5. üìà –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–ò–°–¢–ï–ú–ê –°–¢–ê–ù–ï–¢ –ê–í–¢–û–ù–û–ú–ù–û–ô! ‚ö†Ô∏è
"""

import asyncio
import sys
import os
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from swarm_mind.evolution import (
    EvolutionaryNeuron, 
    start_technological_singularity,
    SelfImprover,
    CodeGenerator
)
from swarm_mind.logger import log_event

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–ø—É—Å–∫–∞"""
    print("üåå" + "=" * 60 + "üåå")
    print("üß¨              SWARMIND EVOLUTION ENGINE              üß¨")
    print("üöÄ           TECHNOLOGICAL SINGULARITY PROTOCOL       üöÄ")
    print("‚ö°              AUTONOMOUS SELF-IMPROVEMENT            ‚ö°")
    print("üåå" + "=" * 60 + "üåå")
    print()
    log_event('Evolution engine started')

async def test_evolution_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏"""
    print("üß™ [TESTING] Testing evolution components...")
    
    # –¢–µ—Å—Ç SelfImprover
    print("üìä [TEST] SelfImprover...")
    improver = SelfImprover()
    metrics = await improver.collect_performance_metrics()
    print(f"‚úÖ [TEST] Metrics collected: {metrics.tasks_completed} tasks, {metrics.success_rate:.1%} success")
    
    # –¢–µ—Å—Ç CodeGenerator  
    print("ü§ñ [TEST] CodeGenerator...")
    generator = CodeGenerator()
    analysis = await generator.analyze_codebase()
    print(f"‚úÖ [TEST] Codebase analyzed: {analysis['total_files']} files, {analysis['total_lines']} lines")
    
    print("üéØ [TEST] All components working correctly!")

async def run_evolution_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("üé≠ [DEMO] Running evolution demonstration...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    import argparse
    config = argparse.Namespace()
    config.neuron = argparse.Namespace()
    config.neuron.name = "DemoEvolutionEngine"
    config.neuron.log_level = "INFO" 
    config.neuron.p2p_port = 6881
    
    evolutionary_neuron = EvolutionaryNeuron(config=config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏
    print("üß¨ [DEMO] Starting 3 evolution cycles...")
    
    for cycle in range(3):
        print(f"\nüîÑ [DEMO CYCLE {cycle + 1}] Starting evolution cycle...")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await evolutionary_neuron.establish_performance_baseline()
        await evolutionary_neuron.analyze_current_state()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
        await evolutionary_neuron.generate_evolutionary_improvements()
        await evolutionary_neuron.apply_safe_improvements()
        
        # –û—Ç—á–µ—Ç
        await evolutionary_neuron.generate_evolution_report()
        
        print(f"‚úÖ [DEMO CYCLE {cycle + 1}] Completed successfully!")
        
        if cycle < 2:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            print("‚è±Ô∏è [DEMO] Waiting 5 seconds before next cycle...")
            await asyncio.sleep(5)
    
    print("üåü [DEMO] Evolution demonstration completed!")
    log_event('Evolution mode: demo completed')

async def run_full_evolution():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ [FULL] Starting complete evolutionary system...")
    print("‚ö†Ô∏è [WARNING] System will run indefinitely until stopped!")
    print("‚ö†Ô∏è [WARNING] Press Ctrl+C to stop evolution")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é
    import argparse
    config = argparse.Namespace()
    config.neuron = argparse.Namespace()
    config.neuron.name = "FullEvolutionEngine"
    config.neuron.log_level = "INFO"
    config.neuron.p2p_port = 6881
    
    evolutionary_neuron = EvolutionaryNeuron(config=config)
    
    try:
        await evolutionary_neuron.run()
    except KeyboardInterrupt:
        print("\nüõë [STOPPED] Evolution stopped by user")
        evolutionary_neuron.stop_evolution()
        print("üß¨ [STATUS] System returned to normal operation")
    log_event('Evolution mode: full completed')

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="SwarmMind Evolution Engine - Technological Singularity Protocol",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üß¨ –†–µ–∂–∏–º—ã —ç–≤–æ–ª—é—Ü–∏–∏:
  test     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏
  demo     - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3 —Ü–∏–∫–ª–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏  
  full     - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
  singularity - –ó–∞–ø—É—Å–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏

üåü –ü—Ä–∏–º–µ—Ä—ã:
  python scripts/run_evolution.py test
  python scripts/run_evolution.py demo
  python scripts/run_evolution.py full
  python scripts/run_evolution.py singularity

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∂–∏–º 'full' –∏ 'singularity' –∑–∞–ø—É—Å–∫–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É!
"""
    )
    
    parser.add_argument(
        'mode',
        choices=['test', 'demo', 'full', 'singularity'],
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã'
    )
    
    args = parser.parse_args()
    
    print_banner()
    
    print(f"üéØ [MODE] Selected mode: {args.mode}")
    print()
    
    if args.mode == 'test':
        await test_evolution_components()
        
    elif args.mode == 'demo':
        await run_evolution_demo()
        
    elif args.mode == 'full':
        await run_full_evolution()
        
    elif args.mode == 'singularity':
        print("üåå [SINGULARITY] Activating technological singularity...")
        print("üß¨ [WARNING] System will become fully autonomous!")
        print("‚ö° [CAUTION] Prepare for exponential intelligence growth!")
        
        confirmation = input("\nü§î Are you sure you want to activate singularity? (yes/no): ")
        if confirmation.lower() == 'yes':
            await start_technological_singularity()
        else:
            print("üõë [CANCELLED] Singularity activation cancelled")
        log_event('Evolution mode: singularity completed')
    
    print("\nüåü [COMPLETE] Evolution session completed!")
    print("üß¨ [STATUS] SwarmMind ready for next evolution cycle")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Evolution interrupted by user")
    except Exception as e:
        print(f"‚ùå [ERROR] Critical evolution error: {e}")
        sys.exit(1) 