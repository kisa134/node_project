#!/usr/bin/env python3
# The MIT License (MIT)
# Copyright ¬© 2025 <kisa134>

"""
üß†üß† –ó–ê–ü–£–°–ö –î–í–£–•–ú–û–ó–ì–û–í–û–ô –≠–í–û–õ–Æ–¶–ò–ò üß†üß†

–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è —Å –¥–≤—É–º—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ò–ò:

üéØ –°–¢–†–ê–¢–ï–ì (Llama3/Mixtral): –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç, —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª–∏
üîß –ò–ù–ñ–ï–ù–ï–† (DeepSeek-Coder): –ü–∏—à–µ—Ç –∫–æ–¥, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç, –∏—Å–ø–æ–ª–Ω—è–µ—Ç

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–ò–°–¢–ï–ú–ê –ë–£–î–ï–¢ –ê–í–¢–û–ù–û–ú–ù–û –ò–ó–ú–ï–ù–Ø–¢–¨ –°–í–û–ô –ö–û–î!
"""

import asyncio
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def print_banner():
    """–ë–∞–Ω–Ω–µ—Ä –¥–≤—É—Ö–º–æ–∑–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üåå" + "="*70 + "üåå")
    print("üß†üß†           DUAL BRAIN EVOLUTION PROTOCOL           üß†üß†")
    print("üéØüîß       STRATEGIST + ENGINEER = SINGULARITY        üîßüéØ")
    print("‚ö°üí•          AUTONOMOUS CODE MODIFICATION             üí•‚ö°")
    print("üåå" + "="*70 + "üåå")
    print()
    print("üéØ –°–¢–†–ê–¢–ï–ì BRAIN: Llama3/Mixtral - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ")
    print("üîß –ò–ù–ñ–ï–ù–ï–† BRAIN: DeepSeek-Coder - –≠–ª–∏—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô")
    print()
    print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–ò–°–¢–ï–ú–ê –ë–£–î–ï–¢ –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–¢–¨ –°–û–ë–°–¢–í–ï–ù–ù–´–ô –ö–û–î!")
    print("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("üíæ –ë–≠–ö–ê–ü–´: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    print()

async def test_dual_brain_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö–º–æ–∑–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ [TESTING] Testing dual-brain components...")
    
    try:
        from swarm_mind.evolution.dual_brain_architect import DualBrainArchitect
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞
        architect = DualBrainArchitect()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        print("üìä [TEST] Testing system metrics collection...")
        metrics = await architect.gather_system_metrics()
        print(f"‚úÖ [TEST] Metrics: CPU {metrics['cpu_percent']:.1f}%, RAM {metrics['memory_percent']:.1f}%")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        print("üîç [TEST] Testing codebase analysis...")
        codebase = await architect.analyze_current_codebase()
        print(f"‚úÖ [TEST] Codebase: {codebase['total_files']} files, {codebase['total_lines']} lines")
        
        print("üéØ [TEST] All dual-brain components working!")
        return True
        
    except Exception as e:
        print(f"‚ùå [TEST] Error testing components: {e}")
        return False

async def run_single_evolution_cycle():
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üß¨ [DEMO] Running single evolution cycle...")
    
    try:
        from swarm_mind.evolution.dual_brain_architect import DualBrainArchitect
        
        architect = DualBrainArchitect()
        
        print("üéØ [DEMO] Strategist analyzing system...")
        print("üîß [DEMO] Engineer preparing solutions...")
        print("üõ°Ô∏è [DEMO] Safety systems active...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª
        success = await architect.run_autonomous_evolution_cycle()
        
        if success:
            print("üéâ [DEMO] Evolution cycle completed successfully!")
            print(f"üìà [STATS] Evolution level: {architect.system_evolution_level:.1f}")
            print(f"üîß [STATS] Improvements made: {architect.improvements_made}")
        else:
            print("‚ÑπÔ∏è [DEMO] No improvements needed or user denied changes")
        
        return success
        
    except Exception as e:
        print(f"‚ùå [DEMO] Error during evolution cycle: {e}")
        return False

async def run_continuous_evolution(cycles: int = 5):
    """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏"""
    print(f"üîÑ [CONTINUOUS] Starting {cycles} cycles of autonomous evolution...")
    print("‚ö†Ô∏è [WARNING] System will continuously improve itself!")
    
    confirmation = input("\nü§î Continue with autonomous evolution? (yes/no): ")
    if confirmation.lower() != 'yes':
        print("üõë [CANCELLED] Autonomous evolution cancelled")
        return
    
    try:
        from swarm_mind.evolution.dual_brain_architect import start_autonomous_evolution
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —ç–≤–æ–ª—é—Ü–∏—é
        await start_autonomous_evolution()
        
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Evolution stopped by user")
    except Exception as e:
        print(f"‚ùå [ERROR] Critical error during evolution: {e}")

async def interactive_evolution():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üéÆ [INTERACTIVE] Interactive evolution mode...")
    print("üë§ [CONTROL] You control each step of the evolution")
    
    try:
        from swarm_mind.evolution.dual_brain_architect import DualBrainArchitect
        
        architect = DualBrainArchitect()
        
        cycle = 1
        while True:
            print(f"\nüß¨ [CYCLE {cycle}] Ready for evolution cycle {cycle}")
            print("Options:")
            print("  ‚ñ∂Ô∏è  [1] Run evolution cycle")
            print("  üìä [2] Show system stats")
            print("  üîç [3] Analyze codebase")
            print("  üõë [4] Exit")
            
            choice = input("\nüéØ Choose option (1-4): ").strip()
            
            if choice == '1':
                print(f"\nüöÄ [CYCLE {cycle}] Starting evolution...")
                success = await architect.run_autonomous_evolution_cycle()
                if success:
                    cycle += 1
                    print(f"‚úÖ [CYCLE] Evolution successful! Level: {architect.system_evolution_level:.1f}")
                else:
                    print("‚ÑπÔ∏è [CYCLE] No changes made this cycle")
            
            elif choice == '2':
                print("\nüìä [STATS] System Statistics:")
                metrics = await architect.gather_system_metrics()
                print(f"   üíª CPU Usage: {metrics['cpu_percent']:.1f}%")
                print(f"   üß† Memory Usage: {metrics['memory_percent']:.1f}%")
                print(f"   üíæ Disk Usage: {metrics['disk_usage']:.1f}%")
                print(f"   üîß Improvements Made: {architect.improvements_made}")
                print(f"   üìà Evolution Level: {architect.system_evolution_level:.1f}")
            
            elif choice == '3':
                print("\nüîç [ANALYSIS] Codebase Analysis:")
                codebase = await architect.analyze_current_codebase()
                print(f"   üìÇ Total Files: {codebase['total_files']}")
                print(f"   üìù Total Lines: {codebase['total_lines']}")
                print(f"   üèóÔ∏è Complexity Score: {codebase['complexity_score']}")
            
            elif choice == '4':
                print("üõë [EXIT] Exiting interactive evolution")
                break
            
            else:
                print("‚ùì Invalid option, please choose 1-4")
    
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Interactive evolution stopped")
    except Exception as e:
        print(f"‚ùå [ERROR] Error in interactive mode: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Dual Brain Evolution System - Autonomous Code Modification",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üß†üß† –†–µ–∂–∏–º—ã –¥–≤—É—Ö–º–æ–∑–≥–æ–≤–æ–π —ç–≤–æ–ª—é—Ü–∏–∏:
  test          - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  demo          - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏  
  single        - –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
  continuous    - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è (–û–ü–ê–°–ù–û!)
  interactive   - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ—à–∞–≥–æ–≤—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º

üåü –ü—Ä–∏–º–µ—Ä—ã:
  python scripts/run_dual_brain_evolution.py test
  python scripts/run_dual_brain_evolution.py demo
  python scripts/run_dual_brain_evolution.py interactive
  python scripts/run_dual_brain_evolution.py continuous

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∂–∏–º—ã 'continuous' –∑–∞–ø—É—Å–∫–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞!
üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üíæ –ë–≠–ö–ê–ü–´: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
"""
    )
    
    parser.add_argument(
        'mode',
        choices=['test', 'demo', 'single', 'continuous', 'interactive'],
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–≤—É—Ö–º–æ–∑–≥–æ–≤–æ–π —ç–≤–æ–ª—é—Ü–∏–∏'
    )
    
    parser.add_argument(
        '--cycles',
        type=int,
        default=5,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–ª—è continuous —Ä–µ–∂–∏–º–∞ (default: 5)'
    )
    
    args = parser.parse_args()
    
    print_banner()
    
    print(f"üéØ [MODE] Selected mode: {args.mode}")
    print()
    
    if args.mode == 'test':
        success = await test_dual_brain_components()
        if success:
            print("üéâ [SUCCESS] All tests passed! System ready for evolution!")
        else:
            print("‚ùå [FAILED] Tests failed, please check configuration")
    
    elif args.mode == 'demo':
        await run_single_evolution_cycle()
    
    elif args.mode == 'single':
        await run_single_evolution_cycle()
    
    elif args.mode == 'continuous':
        await run_continuous_evolution(args.cycles)
    
    elif args.mode == 'interactive':
        await interactive_evolution()
    
    print("\nüåü [COMPLETE] Dual-brain evolution session completed!")
    print("üß† [STATUS] System intelligence preserved and enhanced!")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Evolution stopped by user")
    except Exception as e:
        print(f"‚ùå [FATAL] Critical error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 