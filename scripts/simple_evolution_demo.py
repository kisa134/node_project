#!/usr/bin/env python3
# The MIT License (MIT)
# Copyright ¬© 2025 <kisa134>

"""
üß¨ –ü–†–û–°–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –≠–í–û–õ–Æ–¶–ò–ò SWARMIND üß¨

–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–º–æ—É–ª—É—á—à–∞—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–ª–∞—Å—Å–æ–≤.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from swarm_mind.evolution.self_improver import SelfImprover
from swarm_mind.evolution.code_generator import CodeGenerator

async def run_simple_evolution_demo():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏"""
    print("üåå" + "=" * 60 + "üåå")
    print("üß¨           SWARMIND EVOLUTION DEMONSTRATION           üß¨")
    print("üöÄ              SELF-IMPROVEMENT IN ACTION             üöÄ")
    print("üåå" + "=" * 60 + "üåå")
    print()
    
    # 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
    print("üîß [INIT] Initializing evolution components...")
    improver = SelfImprover()
    generator = CodeGenerator()
    print("‚úÖ [INIT] Evolution components ready!")
    print()
    
    # 2. –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´
    print("üîç [ANALYSIS] Analyzing current system state...")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    metrics = await improver.collect_performance_metrics()
    print(f"üìä [METRICS] Tasks: {metrics.tasks_completed}, Success: {metrics.success_rate:.1%}")
    print(f"‚ö° [METRICS] Response Time: {metrics.average_response_time:.2f}s, CPU: {metrics.cpu_usage:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    codebase_analysis = await generator.analyze_codebase()
    print(f"üß† [CODE] Files: {codebase_analysis['total_files']}, Lines: {codebase_analysis['total_lines']}")
    print(f"üèóÔ∏è [CODE] Functions: {len(codebase_analysis['functions'])}, Classes: {len(codebase_analysis['classes'])}")
    
    if codebase_analysis['technical_debt']:
        print(f"‚ö†Ô∏è [DEBT] Technical debt detected: {len(codebase_analysis['technical_debt'])} issues")
    print()
    
    # 3. –≠–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –¶–ò–ö–õ
    for cycle in range(3):
        print(f"üß¨ [CYCLE {cycle + 1}] Starting evolution cycle...")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        print("üìà [TRENDS] Analyzing performance trends...")
        performance_analysis = await improver.analyze_performance_trends()
        
        if performance_analysis['needs_improvement']:
            print(f"üîß [IMPROVEMENT] Issues detected: {performance_analysis['issues']}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI
            print("üß† [AI] Asking AI to generate improvements...")
            improvements = await improver.generate_improvements(performance_analysis)
            print(f"üí° [AI] Generated {len(improvements)} improvement suggestions")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
            if improvements:
                print("üî® [APPLYING] Simulating improvement application...")
                await improver.apply_best_improvements()
                print("‚úÖ [SUCCESS] Improvements applied successfully!")
            
        else:
            print("üéØ [STATUS] System performance is optimal!")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–¥–∞
        print("ü§ñ [CODE-AI] Generating code improvements...")
        code_improvements = await generator.generate_code_improvements(codebase_analysis)
        
        if code_improvements:
            print(f"üìù [CODE-GEN] Generated {len(code_improvements)} code improvements:")
            for i, improvement in enumerate(code_improvements[:2], 1):
                print(f"   {i}. {improvement.get('type', 'optimization')}: {improvement.get('explanation', 'Improvement')}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π (–∫–∞–∂–¥—ã–π 3-–π —Ü–∏–∫–ª)
        if cycle == 2:
            print("üÜï [NEW-MODULE] Creating new capability...")
            new_module = await generator.generate_new_module(
                "Smart Resource Manager",
                ["Automatic resource allocation", "Performance monitoring", "Predictive scaling"]
            )
            
            if new_module:
                print(f"‚ú® [NEW-MODULE] Generated {len(new_module.split(chr(10)))} lines of new code!")
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
                test_results = await generator.test_generated_code(new_module)
                print(f"üß™ [QUALITY] New module quality: {test_results['score']:.1f}/100")
        
        print(f"‚úÖ [CYCLE {cycle + 1}] Evolution cycle completed!")
        print()
        
        if cycle < 2:
            print("‚è±Ô∏è [WAIT] Waiting 3 seconds before next cycle...")
            await asyncio.sleep(3)
    
    # 4. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("üìä [FINAL REPORT] Evolution Demonstration Results:")
    print("=" * 60)
    print("üîÑ Evolution Cycles Completed: 3")
    print("üìà Performance Analysis: ‚úÖ Working")
    print("üß† AI Code Generation: ‚úÖ Working")
    print("ü§ñ Autonomous Improvement: ‚úÖ Working")
    print("üÜï New Module Creation: ‚úÖ Working")
    print("üß™ Code Quality Testing: ‚úÖ Working")
    print("=" * 60)
    print()
    
    print("üåü [SUCCESS] SwarmMind evolution demonstration completed!")
    print("üß¨ [STATUS] System is ready for full autonomous evolution!")
    print("üöÄ [NEXT] Run 'python scripts/run_evolution.py full' for continuous evolution")

if __name__ == "__main__":
    try:
        asyncio.run(run_simple_evolution_demo())
    except KeyboardInterrupt:
        print("\nüõë [INTERRUPTED] Evolution demonstration stopped")
    except Exception as e:
        print(f"‚ùå [ERROR] Evolution error: {e}")
        import traceback
        traceback.print_exc() 