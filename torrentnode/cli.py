"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è TorrentNode Net

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π, –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ç–æ–∫–µ–Ω–∞–º–∏.
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import List, Optional

import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm

from .node import Node, NodeConfig
from .task_executor import Task, TaskType, EXAMPLE_TASKS
from .utils import format_bytes, format_time, is_valid_address

console = Console()


@click.group()
@click.version_option(version='0.1.0', prog_name='TorrentNode Net')
def cli():
    """TorrentNode Net - –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P2P —Å–µ—Ç—å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
    pass


@cli.command()
@click.option('--port', '-p', default=8888, help='–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è')
@click.option('--name', '-n', default=None, help='–ò–º—è –Ω–æ–¥—ã')
@click.option('--data-dir', '-d', default='./data', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö')
@click.option('--bootstrap', '-b', multiple=True, help='Bootstrap –Ω–æ–¥—ã (host:port)')
@click.option('--no-dht', is_flag=True, help='–û—Ç–∫–ª—é—á–∏—Ç—å DHT')
@click.option('--no-encryption', is_flag=True, help='–û—Ç–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ')
@click.option('--max-peers', default=50, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ä–æ–≤')
@click.option('--verbose', '-v', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
def start(port, name, data_dir, bootstrap, no_dht, no_encryption, max_peers, verbose):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É TorrentNode"""
    console.print(f"[bold cyan]üöÄ TorrentNode Net v0.1.0[/bold cyan]")
    console.print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = NodeConfig(
        port=port,
        name=name or f"node_{port}",
        data_dir=Path(data_dir),
        bootstrap_nodes=list(bootstrap),
        enable_dht=not no_dht,
        enable_encryption=not no_encryption,
        max_peers=max_peers,
        log_level="DEBUG" if verbose else "INFO"
    )
    
    # –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–¥—ã")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
    
    table.add_row("–ò–º—è", config.name)
    table.add_row("–ü–æ—Ä—Ç", str(config.port))
    table.add_row("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö", str(config.data_dir))
    table.add_row("DHT", "‚úì" if config.enable_dht else "‚úó")
    table.add_row("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "‚úì" if config.enable_encryption else "‚úó")
    table.add_row("–ú–∞–∫—Å. –ø–∏—Ä–æ–≤", str(config.max_peers))
    
    if config.bootstrap_nodes:
        table.add_row("Bootstrap –Ω–æ–¥—ã", "\n".join(config.bootstrap_nodes))
    
    console.print(table)
    console.print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã
    node = Node(config)
    
    try:
        console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏[/yellow]")
        asyncio.run(node.start())
    except KeyboardInterrupt:
        console.print("\n[yellow]–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã...[/yellow]")
        asyncio.run(node.stop())
        console.print("[green]‚úì –ù–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/green]")


@cli.command()
@click.option('--type', '-t', type=click.Choice([t.value for t in TaskType]), required=True, help='–¢–∏–ø –∑–∞–¥–∞—á–∏')
@click.option('--data', '-d', required=True, help='–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (JSON)')
@click.option('--reward', '-r', default=10.0, type=float, help='–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–∫–µ–Ω–∞—Ö')
@click.option('--node-port', '-p', default=8888, help='–ü–æ—Ä—Ç –Ω–æ–¥—ã')
@click.option('--timeout', default=300, help='–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)')
def task(type, data, reward, node_port, timeout):
    """–°–æ–∑–¥–∞—Ç—å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–µ—Ç–∏"""
    console.print("[cyan]–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...[/cyan]")
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        task_data = json.loads(data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_obj = Task(
            type=TaskType(type),
            data=task_data,
            reward=reward,
            timeout=timeout
        )
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
        table = Table(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("ID", task_obj.id)
        table.add_row("–¢–∏–ø", task_obj.type.value)
        table.add_row("–î–∞–Ω–Ω—ã–µ", str(task_obj.data))
        table.add_row("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", f"{task_obj.reward} —Ç–æ–∫–µ–Ω–æ–≤")
        table.add_row("–¢–∞–π–º–∞—É—Ç", f"{task_obj.timeout} —Å–µ–∫")
        
        console.print(table)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not Confirm.ask("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–µ—Ç–∏?"):
            console.print("[red]–û—Ç–º–µ–Ω–µ–Ω–æ[/red]")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–æ–¥—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        config = NodeConfig(port=node_port)
        node = Node(config)
        
        async def distribute():
            node.session = node._create_session()
            torrent_hash = await node.distribute_task(task_obj)
            console.print(f"\n[green]‚úì –ó–∞–¥–∞—á–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞![/green]")
            console.print(f"[cyan]Hash: {torrent_hash}[/cyan]")
            return torrent_hash
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            transient=True,
        ) as progress:
            progress.add_task(description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...", total=None)
            torrent_hash = asyncio.run(distribute())
        
    except json.JSONDecodeError:
        console.print("[red]–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö[/red]")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


@cli.command()
@click.option('--node-port', '-p', default=8888, help='–ü–æ—Ä—Ç –Ω–æ–¥—ã')
def balance(node_port):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        config = NodeConfig(port=node_port)
        node = Node(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        balance_info = node.reward_system.get_balance_info(node.node_id)
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        table = Table(title=f"–ë–∞–ª–∞–Ω—Å –Ω–æ–¥—ã {node.node_id}")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("–î–æ—Å—Ç—É–ø–Ω–æ", f"{balance_info.balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤")
        table.add_row("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", f"{balance_info.locked:.2f} —Ç–æ–∫–µ–Ω–æ–≤")
        table.add_row("–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ", f"{balance_info.earned_total:.2f} —Ç–æ–∫–µ–Ω–æ–≤")
        table.add_row("–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ", f"{balance_info.spent_total:.2f} —Ç–æ–∫–µ–Ω–æ–≤")
        
        console.print(table)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = node.reward_system.get_transactions(node.node_id, limit=10)
        
        if transactions:
            console.print("\n[cyan]–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:[/cyan]")
            tx_table = Table()
            tx_table.add_column("–¢–∏–ø", style="cyan")
            tx_table.add_column("–û—Ç", style="yellow")
            tx_table.add_column("–ö–æ–º—É", style="yellow")
            tx_table.add_column("–°—É–º–º–∞", style="green")
            tx_table.add_column("–í—Ä–µ–º—è", style="magenta")
            
            for tx in transactions:
                from_addr = tx.from_address[:8] + "..." if len(tx.from_address) > 10 else tx.from_address
                to_addr = tx.to_address[:8] + "..." if len(tx.to_address) > 10 else tx.to_address
                
                tx_table.add_row(
                    tx.tx_type,
                    from_addr,
                    to_addr,
                    f"{tx.amount:.2f}",
                    format_time(time.time() - tx.timestamp)
                )
            
            console.print(tx_table)
        
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


@cli.command()
@click.option('--from-port', '-f', default=8888, help='–ü–æ—Ä—Ç –Ω–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è')
@click.option('--to', '-t', required=True, help='ID –Ω–æ–¥—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
@click.option('--amount', '-a', required=True, type=float, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤')
def transfer(from_port, to, amount):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã –¥—Ä—É–≥–æ–π –Ω–æ–¥–µ"""
    try:
        config = NodeConfig(port=from_port)
        node = Node(config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = node.reward_system.get_balance(node.node_id)
        if balance < amount:
            console.print(f"[red]–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ç–æ–∫–µ–Ω–æ–≤[/red]")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        console.print(f"[yellow]–ü–µ—Ä–µ–≤–æ–¥ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç {node.node_id} –∫ {to}[/yellow]")
        if not Confirm.ask("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?"):
            console.print("[red]–û—Ç–º–µ–Ω–µ–Ω–æ[/red]")
            return
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        success, msg = node.reward_system.transfer(node.node_id, to, amount)
        
        if success:
            console.print(f"[green]‚úì –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
            if msg != "Success":
                console.print(f"[cyan]TX: {msg}[/cyan]")
        else:
            console.print(f"[red]‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {msg}[/red]")
            
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


@cli.command()
@click.option('--limit', '-l', default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π')
def leaderboard(limit):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
        config = NodeConfig()
        node = Node(config)
        
        leaders = node.reward_system.get_leaderboard(limit)
        
        if not leaders:
            console.print("[yellow]–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞[/yellow]")
            return
        
        table = Table(title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
        table.add_column("#", style="cyan", width=3)
        table.add_column("–ù–æ–¥–∞", style="yellow")
        table.add_column("–ë–∞–ª–∞–Ω—Å", style="green", justify="right")
        table.add_column("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ", style="magenta", justify="right")
        
        for i, (address, balance, earned) in enumerate(leaders, 1):
            node_display = address[:16] + "..." if len(address) > 20 else address
            table.add_row(
                str(i),
                node_display,
                f"{balance:.2f}",
                f"{earned:.2f}"
            )
        
        console.print(table)
        
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


@cli.command()
def examples():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á"""
    console.print("[bold cyan]üìö –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á[/bold cyan]\n")
    
    for i, task in enumerate(EXAMPLE_TASKS, 1):
        console.print(f"[yellow]{i}. {task.type.value.upper()}[/yellow]")
        console.print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(task.data)}")
        console.print(f"   –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
        console.print(f"   –ö–æ–º–∞–Ω–¥–∞: [cyan]torrentnode task -t {task.type.value} -d '{json.dumps(task.data)}' -r {task.reward}[/cyan]")
        console.print()


@cli.command()
def stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        config = NodeConfig()
        node = Node(config)
        
        stats = node.reward_system.get_statistics()
        
        table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        table.add_row("–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤", str(stats['total_addresses']))
        table.add_row("–û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ–∫–µ–Ω–æ–≤", f"{stats['total_supply']:.2f}")
        table.add_row("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", f"{stats['total_locked']:.2f}")
        table.add_row("–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", str(stats['total_transactions']))
        table.add_row("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π", f"{stats['total_rewards_distributed']:.2f}")
        table.add_row("–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–æ–¥—ã", f"{stats['initial_balance_per_node']:.2f}")
        table.add_row("–ë–ª–æ–∫—á–µ–π–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω", "‚úì" if stats['blockchain_connected'] else "‚úó")
        
        console.print(table)
        
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


@cli.command()
@click.argument('addresses', nargs=-1, required=True)
def connect(addresses):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–¥–∞–º"""
    console.print("[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤...[/cyan]")
    
    valid_addresses = []
    for addr in addresses:
        if is_valid_address(addr):
            valid_addresses.append(addr)
            console.print(f"  ‚úì {addr}")
        else:
            console.print(f"  [red]‚úó {addr} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç[/red]")
    
    if valid_addresses:
        console.print(f"\n[green]–í–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {len(valid_addresses)}[/green]")
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    else:
        console.print("\n[red]–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    try:
        cli()
    except Exception as e:
        console.print(f"[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main()) 