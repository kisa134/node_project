#!/usr/bin/env python3
"""
üåê –ï–î–ò–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° SWARMIND üåê

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —É–¥–æ–±–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏  
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
- AI-–∏–Ω—Å–∞–π—Ç—ã
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import json
import time
import psutil
import subprocess
import threading
from datetime import datetime
from flask import Flask, render_template_string, jsonify, request
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import io
import base64
import numpy as np
from collections import deque
import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '.'))
sys.path.insert(0, project_root)

from swarm_mind.logger import swarm_logger, log_event
from swarm_mind.evolution.dual_brain_architect import DualBrainLogAnalyzer
from github_integration import setup_github_integration, GitHubIntegration

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
system_status = {
    "last_update": datetime.now().isoformat(),
    "evolution_cycles": 0,
    "active_neurons": 0,
    "cpu_usage": 0,
    "memory_usage": 0,
    "docker_containers": [],
    "ollama_status": "unknown"
}

# –î–∞–Ω–Ω—ã–µ —ç–≤–æ–ª—é—Ü–∏–∏
evolution_data = {
    "timestamps": deque(maxlen=1000),
    "cpu_usage": deque(maxlen=1000),
    "memory_usage": deque(maxlen=1000),
    "evolution_cycles": deque(maxlen=1000),
    "code_improvements": deque(maxlen=1000),
    "performance_score": deque(maxlen=1000),
    "intelligence_level": deque(maxlen=1000),
    "modules_created": deque(maxlen=1000),
    "bugs_fixed": deque(maxlen=1000),
    "learning_rate": deque(maxlen=1000),
    "current_cycle": 0,
    "total_improvements": 0,
    "start_time": datetime.now(),
    "evolution_history": [],
    "evolution_active": True
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
log_analyzer = DualBrainLogAnalyzer()
log_analyzer.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
github_integration = setup_github_integration()

def get_system_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        cpu_usage = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        memory_usage = memory.percent
        
        system_status["cpu_usage"] = cpu_usage
        system_status["memory_usage"] = memory_usage
        system_status["last_update"] = datetime.now().isoformat()
        
        return cpu_usage, memory_usage
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {str(e)}", logging.ERROR)
        return 0, 0

def get_docker_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    try:
        result = subprocess.run(['docker', 'ps', '--format', 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            containers = []
            for line in lines:
                if line.strip():
                    parts = line.split('\t')
                    if len(parts) >= 2:
                        containers.append({
                            'name': parts[0],
                            'status': parts[1],
                            'ports': parts[2] if len(parts) > 2 else ''
                        })
            system_status["docker_containers"] = containers
            return containers
        else:
            system_status["docker_containers"] = []
            return []
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", logging.ERROR)
        system_status["docker_containers"] = []
        return []

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama"""
    try:
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            system_status["ollama_status"] = "running"
            return "running"
        else:
            system_status["ollama_status"] = "stopped"
            return "stopped"
    except Exception as e:
        system_status["ollama_status"] = "error"
        return "error"

def generate_evolution_chart():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
    try:
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
        fig.patch.set_facecolor('#1a1a1a')
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        if len(evolution_data["timestamps"]) > 0:
            timestamps = list(evolution_data["timestamps"])
            performance = list(evolution_data["performance_score"])
            intelligence = list(evolution_data["intelligence_level"])
            
            ax1.plot(timestamps, performance, 'g-', label='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', linewidth=2)
            ax1.plot(timestamps, intelligence, 'b-', label='–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', linewidth=2)
            ax1.set_ylabel('–£—Ä–æ–≤–µ–Ω—å (%)', color='white')
            ax1.set_title('–≠–≤–æ–ª—é—Ü–∏—è SwarmMind', color='white', fontsize=14)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            ax1.set_facecolor('#2a2a2a')
            ax1.tick_params(colors='white')
            
            # –ì—Ä–∞—Ñ–∏–∫ —É–ª—É—á—à–µ–Ω–∏–π
            improvements = list(evolution_data["code_improvements"])
            ax2.bar(range(len(improvements)), improvements, color='#4ecdc4', alpha=0.7)
            ax2.set_ylabel('–£–ª—É—á—à–µ–Ω–∏—è', color='white')
            ax2.set_xlabel('–¶–∏–∫–ª—ã', color='white')
            ax2.set_title('–ö–æ–¥ —É–ª—É—á—à–µ–Ω–∏—è', color='white')
            ax2.set_facecolor('#2a2a2a')
            ax2.tick_params(colors='white')
        
        plt.tight_layout()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        canvas = FigureCanvas(fig)
        canvas.draw()
        img_data = io.BytesIO()
        fig.savefig(img_data, format='png', facecolor='#1a1a1a', bbox_inches='tight')
        img_data.seek(0)
        img_base64 = base64.b64encode(img_data.getvalue()).decode()
        plt.close(fig)
        
        return img_base64
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", logging.ERROR)
        return None

def background_monitoring():
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            get_system_metrics()
            get_docker_status()
            check_ollama()
            time.sleep(5)
        except Exception as e:
            log_event(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}", logging.ERROR)
            time.sleep(10)

def background_evolution_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ"""
    cycle = 0
    while evolution_data["evolution_active"]:
        try:
            cycle += 1
            current_time = datetime.now()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —ç–≤–æ–ª—é—Ü–∏–∏
            performance = min(100, 50 + cycle * 2 + np.random.normal(0, 3))
            intelligence = min(100, 40 + cycle * 1.5 + np.random.normal(0, 2))
            improvements = max(0, int(np.random.poisson(2) + cycle * 0.1))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            evolution_data["timestamps"].append(current_time.strftime("%H:%M:%S"))
            evolution_data["cpu_usage"].append(system_status["cpu_usage"])
            evolution_data["memory_usage"].append(system_status["memory_usage"])
            evolution_data["evolution_cycles"].append(cycle)
            evolution_data["performance_score"].append(performance)
            evolution_data["intelligence_level"].append(intelligence)
            evolution_data["code_improvements"].append(improvements)
            evolution_data["current_cycle"] = cycle
            evolution_data["total_improvements"] += improvements
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            log_event(f"Evolution cycle {cycle}: perf={performance:.2f}%, intelligence={intelligence:.2f}, improvements={improvements}")
            
            time.sleep(10)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            log_event(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏: {str(e)}", logging.ERROR)
            time.sleep(30)

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåê SwarmMind Unified Interface</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
            color: #fff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }
        .header {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            text-align: center;
            border-bottom: 2px solid #4ecdc4;
        }
        .nav {
            background: rgba(0,0,0,0.2);
            padding: 10px;
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        .nav button {
            background: #4ecdc4;
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }
        .nav button:hover { background: #45b7aa; transform: translateY(-2px); }
        .nav button.active { background: #ff6b6b; }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        .section {
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid #4ecdc4;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .metric-card {
            background: rgba(78, 205, 196, 0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #4ecdc4;
        }
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #4ecdc4;
        }
        .metric-label {
            color: #ccc;
            margin-top: 5px;
        }
        .chart-container {
            text-align: center;
            margin: 20px 0;
        }
        .chart-container img {
            max-width: 100%;
            border-radius: 8px;
            border: 2px solid #4ecdc4;
        }
        .log-container {
            background: #111;
            border-radius: 8px;
            padding: 15px;
            max-height: 400px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 12px;
        }
        .log-line {
            padding: 2px 0;
            border-bottom: 1px solid #333;
        }
        .log-line:last-child { border-bottom: none; }
        .log-error { color: #ff6b6b; }
        .log-warning { color: #ffd700; }
        .log-info { color: #90ee90; }
        .insights-container {
            background: rgba(78, 205, 196, 0.1);
            border-radius: 8px;
            padding: 15px;
        }
        .insight {
            background: rgba(0,0,0,0.3);
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border-left: 3px solid #4ecdc4;
        }
        .hidden { display: none; }
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .status-running { background: #90ee90; }
        .status-stopped { background: #ff6b6b; }
        .status-unknown { background: #ffd700; }
        .controls {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        .control-btn {
            background: #4ecdc4;
            color: #000;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }
        .control-btn:hover { background: #45b7aa; }
        .control-btn.danger { background: #ff6b6b; }
        .control-btn.danger:hover { background: #ff5252; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üåê SwarmMind Unified Interface</h1>
        <p>–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-—Å–∏—Å—Ç–µ–º–æ–π</p>
    </div>
    
    <div class="nav">
        <button onclick="showSection('dashboard')" class="active">üìä –î–∞—à–±–æ—Ä–¥</button>
        <button onclick="showSection('evolution')">üß¨ –≠–≤–æ–ª—é—Ü–∏—è</button>
        <button onclick="showSection('logs')">üìù –õ–æ–≥–∏</button>
        <button onclick="showSection('insights')">ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã</button>
        <button onclick="showSection('control')">‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</button>
        <button onclick="showSection('github')">üîó GitHub</button>
    </div>
    
    <div class="container">
        <!-- –î–∞—à–±–æ—Ä–¥ -->
        <div id="dashboard" class="section">
            <h2>üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value" id="cpu-usage">0%</div>
                    <div class="metric-label">CPU</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="memory-usage">0%</div>
                    <div class="metric-label">–ü–∞–º—è—Ç—å</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="evolution-cycles">0</div>
                    <div class="metric-label">–¶–∏–∫–ª—ã —ç–≤–æ–ª—é—Ü–∏–∏</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="active-neurons">0</div>
                    <div class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã</div>
                </div>
            </div>
            
            <h3>üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</h3>
            <div id="docker-status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            
            <h3>ü§ñ Ollama —Å—Ç–∞—Ç—É—Å</h3>
            <div id="ollama-status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
        
        <!-- –≠–≤–æ–ª—é—Ü–∏—è -->
        <div id="evolution" class="section hidden">
            <h2>üß¨ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏</h2>
            <div class="chart-container">
                <img id="evolution-chart" src="" alt="–ì—Ä–∞—Ñ–∏–∫ —ç–≤–æ–ª—é—Ü–∏–∏">
            </div>
            <div class="controls">
                <button class="control-btn" onclick="startEvolution()">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é</button>
                <button class="control-btn" onclick="pauseEvolution()">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                <button class="control-btn" onclick="resetEvolution()">üîÑ –°–±—Ä–æ—Å</button>
            </div>
        </div>
        
        <!-- –õ–æ–≥–∏ -->
        <div id="logs" class="section hidden">
            <h2>üìù –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π</h2>
            <div class="controls">
                <button class="control-btn" onclick="refreshLogs()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                <button class="control-btn" onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
            </div>
            <div class="log-container" id="log-content">
                –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...
            </div>
        </div>
        
        <!-- AI –ò–Ω—Å–∞–π—Ç—ã -->
        <div id="insights" class="section hidden">
            <h2>ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã (DualBrain)</h2>
            <div class="controls">
                <button class="control-btn" onclick="refreshInsights()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã</button>
            </div>
            <div class="insights-container" id="insights-content">
                –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å–∞–π—Ç–æ–≤...
            </div>
        </div>
        
        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -->
        <div id="control" class="section hidden">
            <h2>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h2>
            <div class="controls">
                <button class="control-btn" onclick="startDocker()">üê≥ –ó–∞–ø—É—Å—Ç–∏—Ç—å Docker</button>
                <button class="control-btn" onclick="stopDocker()">üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker</button>
                <button class="control-btn" onclick="startOllama()">ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å Ollama</button>
                <button class="control-btn danger" onclick="emergencyStop()">üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞</button>
            </div>
            <div id="control-status">
                <h3>–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π:</h3>
                <div id="control-messages"></div>
            </div>
        </div>

        <!-- GitHub -->
        <div id="github" class="section hidden">
            <h2>üîó GitHub Integration</h2>
            <div class="controls">
                <button class="control-btn" onclick="testGitHubConnection()">üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</button>
                <button class="control-btn" onclick="analyzeRepository()">üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</button>
                <button class="control-btn" onclick="createImprovementPR()">üöÄ –°–æ–∑–¥–∞—Ç—å PR —É–ª—É—á—à–µ–Ω–∏–π</button>
                <button class="control-btn" onclick="autoImproveCode()">ü§ñ –ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞</button>
            </div>
            <div id="github-status">
                <h3>–°—Ç–∞—Ç—É—Å GitHub:</h3>
                <div id="github-messages"></div>
            </div>
            <div id="github-improvements">
                <h3>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</h3>
                <div id="improvements-list"></div>
            </div>
        </div>
    </div>

    <script>
        let currentSection = 'dashboard';
        
        function showSection(sectionName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
            document.querySelectorAll('.section').forEach(s => s.classList.add('hidden'));
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
            document.getElementById(sectionName).classList.remove('hidden');
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.nav button').forEach(b => b.classList.remove('active'));
            event.target.classList.add('active');
            currentSection = sectionName;
        }
        
        function updateDashboard() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('cpu-usage').textContent = data.cpu_usage.toFixed(1) + '%';
                    document.getElementById('memory-usage').textContent = data.memory_usage.toFixed(1) + '%';
                    document.getElementById('evolution-cycles').textContent = data.evolution_cycles;
                    document.getElementById('active-neurons').textContent = data.active_neurons;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º Docker —Å—Ç–∞—Ç—É—Å
                    let dockerHtml = '';
                    data.docker_containers.forEach(container => {
                        const statusClass = container.status.includes('Up') ? 'status-running' : 'status-stopped';
                        dockerHtml += `<div><span class="status-indicator ${statusClass}"></span>${container.name}: ${container.status}</div>`;
                    });
                    document.getElementById('docker-status').innerHTML = dockerHtml || '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º Ollama —Å—Ç–∞—Ç—É—Å
                    const ollamaClass = data.ollama_status === 'running' ? 'status-running' : 
                                      data.ollama_status === 'stopped' ? 'status-stopped' : 'status-unknown';
                    document.getElementById('ollama-status').innerHTML = 
                        `<span class="status-indicator ${ollamaClass}"></span>Ollama: ${data.ollama_status}`;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:', error));
        }
        
        function updateEvolutionChart() {
            fetch('/api/evolution_chart')
                .then(response => response.json())
                .then(data => {
                    if (data.chart_data) {
                        document.getElementById('evolution-chart').src = 'data:image/png;base64,' + data.chart_data;
                    }
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error));
        }
        
        function refreshLogs() {
            fetch('/api/log')
                .then(response => response.json())
                .then(data => {
                    let logHtml = '';
                    data.log.forEach(line => {
                        const lineClass = line.includes('ERROR') ? 'log-error' : 
                                        line.includes('WARNING') ? 'log-warning' : 'log-info';
                        logHtml += `<div class="log-line ${lineClass}">${line}</div>`;
                    });
                    document.getElementById('log-content').innerHTML = logHtml;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error));
        }
        
        function refreshInsights() {
            fetch('/api/insights')
                .then(response => response.json())
                .then(data => {
                    let insightsHtml = '';
                    data.insights.forEach(insight => {
                        insightsHtml += `<div class="insight">${insight}</div>`;
                    });
                    document.getElementById('insights-content').innerHTML = insightsHtml || '–ò–Ω—Å–∞–π—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤:', error));
        }
        
        function startEvolution() {
            fetch('/api/start_evolution', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
                    } else {
                        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: ' + data.message);
                    }
                });
        }
        
        function pauseEvolution() {
            fetch('/api/pause_evolution', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏: ' + data.message);
                    }
                });
        }
        
        function resetEvolution() {
            fetch('/api/reset_evolution', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–≠–≤–æ–ª—é—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!');
                    } else {
                        alert('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏: ' + data.message);
                    }
                });
        }
        
        function startDocker() {
            fetch('/api/start_docker', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('control-messages').innerHTML += 
                        `<div>üê≥ ${data.message}</div>`;
                });
        }
        
        function stopDocker() {
            fetch('/api/stop_docker', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('control-messages').innerHTML += 
                        `<div>üõë ${data.message}</div>`;
                });
        }
        
        function startOllama() {
            fetch('/api/start_ollama', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('control-messages').innerHTML += 
                        `<div>ü§ñ ${data.message}</div>`;
                });
        }
        
        function emergencyStop() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É!')) {
                fetch('/api/emergency_stop', {method: 'POST'})
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('control-messages').innerHTML += 
                            `<div style="color: #ff6b6b;">üö® ${data.message}</div>`;
                    });
            }
        }

        function testGitHubConnection() {
            fetch('/api/github/test_connection', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('github-messages').innerHTML += 
                        `<div style="color: ${data.success ? '#90ee90' : '#ff6b6b'};">üîó ${data.message}</div>`;
                });
        }
        
        function analyzeRepository() {
            fetch('/api/github/analyze', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('github-messages').innerHTML += 
                        `<div>üîç ${data.message}</div>`;
                    if (data.improvements) {
                        let improvementsHtml = '';
                        data.improvements.forEach(imp => {
                            improvementsHtml += `<div class="insight">
                                <strong>${imp.file_path}</strong>: ${imp.description} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${imp.priority})
                            </div>`;
                        });
                        document.getElementById('improvements-list').innerHTML = improvementsHtml;
                    }
                });
        }
        
        function createImprovementPR() {
            fetch('/api/github/create_pr', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('github-messages').innerHTML += 
                        `<div style="color: ${data.success ? '#90ee90' : '#ff6b6b'};">üöÄ ${data.message}</div>`;
                });
        }
        
        function autoImproveCode() {
            fetch('/api/github/auto_improve', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    document.getElementById('github-messages').innerHTML += 
                        `<div style="color: ${data.success ? '#90ee90' : '#ff6b6b'};">ü§ñ ${data.message}</div>`;
                });
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setInterval(() => {
            updateDashboard();
            if (currentSection === 'evolution') {
                updateEvolutionChart();
            }
        }, 5000);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        updateDashboard();
        refreshLogs();
        refreshInsights();
    </script>
</body>
</html>
"""

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/status')
def api_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify(system_status)

@app.route('/api/evolution_chart')
def api_evolution_chart():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
    chart_data = generate_evolution_chart()
    return jsonify({"chart_data": chart_data})

@app.route('/api/log')
def api_log():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
    return jsonify({"log": swarm_logger.get_recent_events(100)})

@app.route('/api/insights')
def api_insights():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-–∏–Ω—Å–∞–π—Ç–æ–≤"""
    return jsonify({"insights": log_analyzer.get_insights(10)})

@app.route('/api/start_evolution', methods=['POST'])
def api_start_evolution():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
    try:
        evolution_data["evolution_active"] = True
        log_event("–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"success": False, "message": str(e)})

@app.route('/api/pause_evolution', methods=['POST'])
def api_pause_evolution():
    """API –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏"""
    try:
        evolution_data["evolution_active"] = False
        log_event("–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"success": False, "message": str(e)})

@app.route('/api/reset_evolution', methods=['POST'])
def api_reset_evolution():
    """API –¥–ª—è —Å–±—Ä–æ—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
    try:
        evolution_data["current_cycle"] = 0
        evolution_data["total_improvements"] = 0
        evolution_data["evolution_history"].clear()
        for key in evolution_data:
            if isinstance(evolution_data[key], deque):
                evolution_data[key].clear()
        log_event("–≠–≤–æ–ª—é—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "–≠–≤–æ–ª—é—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"success": False, "message": str(e)})

@app.route('/api/start_docker', methods=['POST'])
def api_start_docker():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Docker"""
    try:
        subprocess.run(['docker-compose', 'up', '-d'], check=True)
        log_event("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker: {str(e)}"})

@app.route('/api/stop_docker', methods=['POST'])
def api_stop_docker():
    """API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"""
    try:
        subprocess.run(['docker-compose', 'down'], check=True)
        log_event("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker: {str(e)}"})

@app.route('/api/start_ollama', methods=['POST'])
def api_start_ollama():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Ollama"""
    try:
        subprocess.run(['ollama', 'serve'], check=True)
        log_event("Ollama –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ API")
        return jsonify({"success": True, "message": "Ollama –∑–∞–ø—É—â–µ–Ω"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: {str(e)}"})

@app.route('/api/emergency_stop', methods=['POST'])
def api_emergency_stop():
    """API –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        subprocess.run(['docker-compose', 'down'], check=True)
        log_event("–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return jsonify({"success": True, "message": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"})

@app.route('/api/github/test_connection', methods=['POST'])
def api_github_test_connection():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub"""
    if github_integration:
        success = github_integration.test_connection()
        return jsonify({
            "success": success,
            "message": "GitHub –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" if success else "GitHub –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        })
    else:
        return jsonify({
            "success": False,
            "message": "GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GITHUB_TOKEN"
        })

@app.route('/api/github/analyze', methods=['POST'])
def api_github_analyze():
    """API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    if not github_integration:
        return jsonify({"success": False, "message": "GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"})
    
    try:
        files = github_integration.get_repository_files()
        improvements = []
        
        for file in files:
            if file["name"].endswith('.py'):
                content = github_integration.get_file_content(file["path"])
                if content:
                    file_improvements = github_integration.analyze_code_quality(file["path"], content)
                    improvements.extend(file_improvements)
        
        return jsonify({
            "success": True,
            "message": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(improvements)} —É–ª—É—á—à–µ–Ω–∏–π",
            "improvements": [
                {
                    "file_path": imp.file_path,
                    "description": imp.description,
                    "priority": imp.priority,
                    "type": imp.improvement_type
                }
                for imp in improvements
            ]
        })
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"})

@app.route('/api/github/create_pr', methods=['POST'])
def api_github_create_pr():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è pull request"""
    if not github_integration:
        return jsonify({"success": False, "message": "GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"})
    
    try:
        prs = github_integration.auto_improve_repository()
        if prs:
            success = github_integration.create_pull_request(prs[0])
            return jsonify({
                "success": success,
                "message": f"Pull request —Å–æ–∑–¥–∞–Ω: {prs[0].title}" if success else "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR"
            })
        else:
            return jsonify({"success": False, "message": "–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR: {str(e)}"})

@app.route('/api/github/auto_improve', methods=['POST'])
def api_github_auto_improve():
    """API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞"""
    if not github_integration:
        return jsonify({"success": False, "message": "GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"})
    
    try:
        prs = github_integration.auto_improve_repository()
        if prs:
            success = github_integration.create_pull_request(prs[0])
            return jsonify({
                "success": success,
                "message": f"–ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {prs[0].title}" if success else "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏—è"
            })
        else:
            return jsonify({"success": False, "message": "–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏—è: {str(e)}"})

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ SwarmMind...")
    log_event("Unified interface started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    monitoring_thread = threading.Thread(target=background_monitoring, daemon=True)
    monitoring_thread.start()
    
    evolution_thread = threading.Thread(target=background_evolution_simulation, daemon=True)
    evolution_thread.start()
    
    print("üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=5000, debug=False)

if __name__ == "__main__":
    main() 