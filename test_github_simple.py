#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SwarmMind
"""

import os
import sys
from github_integration import GitHubIntegration
from swarm_mind.logger import log_event

def test_github_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('GITHUB_TOKEN')
    repo_owner = os.getenv('GITHUB_REPO_OWNER', 'kisa134')
    repo_name = os.getenv('GITHUB_REPO_NAME', 'node_project')
    
    if not token:
        print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    github = GitHubIntegration(token, repo_owner, repo_name)
    
    if github.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub —É—Å–ø–µ—à–Ω–æ!")
        return github
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub")
        return None

def test_repository_analysis(github):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = github.get_repository_files()
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {len(files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    python_files = [f for f in files if f['name'].endswith('.py')]
    print(f"üêç Python —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    
    for file_info in python_files[:3]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
        file_path = file_info['path']
        content = github.get_file_content(file_path)
        if content:
            improvements = github.analyze_code_quality(file_path, content)
            if improvements:
                print(f"üí° –ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π –≤ {file_path}: {len(improvements)}")
                for imp in improvements[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —É–ª—É—á—à–µ–Ω–∏—è
                    print(f"   - {imp.description}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üåå============================================================üåå")
    print("üöÄ           SWARMIND GITHUB INTEGRATION TEST           üöÄ")
    print("üß¨         AUTONOMOUS CODE IMPROVEMENT DEMO             üß¨")
    print("‚ö°         TECHNOLOGICAL SINGULARITY PROTOCOL          ‚ö°")
    print("üåå============================================================üåå")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    github = test_github_connection()
    if not github:
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if not test_repository_analysis(github):
        return
    
    print("\nüéâ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
    print("üöÄ SwarmMind –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é!")
    print("\nüìã –ß—Ç–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç—å unified_interface.py –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É GitHub –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

if __name__ == "__main__":
    main() 