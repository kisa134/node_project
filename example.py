#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TorrentNode Net

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏:
- –ó–∞–ø—É—Å–∫ –Ω–æ–¥
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
- –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
"""

import asyncio
import json
import time
from pathlib import Path

from torrentnode import Node, NodeConfig, Task, TaskType
from torrentnode.task_executor import EXAMPLE_TASKS


async def run_example():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä"""
    print("üöÄ TorrentNode Net - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–¥
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥...")
    
    # –ü–µ—Ä–≤–∞—è –Ω–æ–¥–∞ (seed node)
    config1 = NodeConfig(
        name="alice_node",
        port=18888,
        data_dir=Path("./example_data/alice"),
        enable_dht=True,
        enable_encryption=True
    )
    node1 = Node(config1)
    
    # –í—Ç–æ—Ä–∞—è –Ω–æ–¥–∞ (–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–π)
    config2 = NodeConfig(
        name="bob_node", 
        port=18889,
        data_dir=Path("./example_data/bob"),
        bootstrap_nodes=["localhost:18888"],
        enable_dht=True,
        enable_encryption=True
    )
    node2 = Node(config2)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–¥–∞ Alice: {node1.node_id}")
    print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–¥–∞ Bob: {node2.node_id}")
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...")
    node1.reward_system.init_balance(node1.node_id)
    node2.reward_system.init_balance(node2.node_id)
    
    alice_balance = node1.get_balance()
    bob_balance = node2.get_balance()
    
    print(f"  Alice: {alice_balance} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"  Bob: {bob_balance} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
    
    # –ó–∞–¥–∞—á–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    sum_task = Task(
        type=TaskType.SUM,
        data=[10, 20, 30, 40, 50],
        reward=15.0
    )
    print(f"  –ó–∞–¥–∞—á–∞ SUM: {sum_task.data} ‚Üí –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {sum_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ó–∞–¥–∞—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_task = Task(
        type=TaskType.SORT,
        data=[9, 3, 7, 1, 5, 8, 2, 6, 4],
        reward=10.0
    )
    print(f"  –ó–∞–¥–∞—á–∞ SORT: {sort_task.data} ‚Üí –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {sort_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ó–∞–¥–∞—á–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    hash_task = Task(
        type=TaskType.HASH,
        data="Hello, TorrentNode Net!",
        reward=5.0
    )
    print(f"  –ó–∞–¥–∞—á–∞ HASH: '{hash_task.data}' ‚Üí –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {hash_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    print("\n4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
    
    # Alice –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    result1 = await node1.task_executor.execute(sum_task)
    if result1.success:
        print(f"  Alice –≤—ã–ø–æ–ª–Ω–∏–ª–∞ SUM: —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {result1.result}")
        print(f"    –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result1.execution_time:.3f}—Å")
        print(f"    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {result1.memory_used}MB")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        node1.reward_system.add_reward(node1.node_id, sum_task.reward, sum_task.id)
        print(f"  ‚úì Alice –ø–æ–ª—É—á–∏–ª–∞ {sum_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # Bob –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    result2 = await node2.task_executor.execute(sort_task)
    if result2.success:
        print(f"  Bob –≤—ã–ø–æ–ª–Ω–∏–ª SORT: —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {result2.result}")
        node2.reward_system.add_reward(node2.node_id, sort_task.reward, sort_task.id)
        print(f"  ‚úì Bob –ø–æ–ª—É—á–∏–ª {sort_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # Bob –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    result3 = await node2.task_executor.execute(hash_task)
    if result3.success:
        print(f"  Bob –≤—ã–ø–æ–ª–Ω–∏–ª HASH: —Ä–µ–∑—É–ª—å—Ç–∞—Ç = {result3.result[:16]}...")
        node2.reward_system.add_reward(node2.node_id, hash_task.reward, hash_task.id)
        print(f"  ‚úì Bob –ø–æ–ª—É—á–∏–ª {hash_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    print("\n5. –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:")
    alice_balance = node1.get_balance()
    bob_balance = node2.get_balance()
    
    print(f"  Alice: {alice_balance} —Ç–æ–∫–µ–Ω–æ–≤ (+{sum_task.reward})")
    print(f"  Bob: {bob_balance} —Ç–æ–∫–µ–Ω–æ–≤ (+{sort_task.reward + hash_task.reward})")
    
    # 6. –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
    print("\n6. –ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤...")
    transfer_amount = 20.0
    
    success, msg = node1.reward_system.transfer(
        node1.node_id,
        node2.node_id,
        transfer_amount
    )
    
    if success:
        print(f"  ‚úì Alice –ø–µ—Ä–µ–≤–µ–ª–∞ {transfer_amount} —Ç–æ–∫–µ–Ω–æ–≤ Bob")
    else:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {msg}")
    
    # 7. –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("\n7. –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
    alice_final = node1.get_balance()
    bob_final = node2.get_balance()
    
    print(f"  Alice: {alice_final} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"  Bob: {bob_final} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("\n8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = node1.reward_system.get_statistics()
    
    print(f"  –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤: {stats['total_addresses']}")
    print(f"  –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_supply']}")
    print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']}")
    print(f"  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: {stats['total_rewards_distributed']}")
    
    # 9. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
    print("\n9. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:")
    leaders = node1.reward_system.get_leaderboard(5)
    
    for i, (address, balance, earned) in enumerate(leaders, 1):
        node_name = "Alice" if address == node1.node_id else "Bob"
        print(f"  {i}. {node_name}: {balance} —Ç–æ–∫–µ–Ω–æ–≤ (–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned})")
    
    # 10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
    print("\n10. –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:")
    
    # –§–∞–∫—Ç–æ—Ä–∏–∞–ª
    factorial_task = Task(
        type=TaskType.FACTORIAL,
        data=10,
        reward=8.0
    )
    result = await node1.task_executor.execute(factorial_task)
    if result.success:
        print(f"  –§–∞–∫—Ç–æ—Ä–∏–∞–ª 10 = {result.result}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞
    prime_task = Task(
        type=TaskType.PRIME_CHECK,
        data=97,
        reward=10.0
    )
    result = await node2.task_executor.execute(prime_task)
    if result.success:
        print(f"  97 - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: {result.result}")
    
    # –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    matrix_task = Task(
        type=TaskType.MATRIX_MULTIPLY,
        data={
            'a': [[1, 2], [3, 4]],
            'b': [[5, 6], [7, 8]]
        },
        reward=15.0
    )
    result = await node1.task_executor.execute(matrix_task)
    if result.success:
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü:")
        for row in result.result:
            print(f"    {row}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
    text_task = Task(
        type=TaskType.TEXT_ANALYSIS,
        data="The quick brown fox jumps over the lazy dog. The dog was sleeping.",
        reward=12.0
    )
    result = await node2.task_executor.execute(text_task)
    if result.success:
        print(f"  –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
        print(f"    –°–ª–æ–≤: {result.result['word_count']}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {result.result['unique_words']}")
        print(f"    –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {result.result['average_word_length']:.2f}")
        print(f"    –¢–æ–ø —Å–ª–æ–≤–∞: {list(result.result['top_words'].items())[:3]}")
    
    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("=" * 50)


async def demo_distributed_task():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç"""
    print("\nüì° –î–µ–º–æ: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥ —Å –º–æ–∫-—Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    from unittest.mock import MagicMock, patch
    
    # –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏
    creator_config = NodeConfig(
        name="creator",
        port=28888,
        data_dir=Path("./example_data/creator")
    )
    creator = Node(creator_config)
    
    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏
    worker_config = NodeConfig(
        name="worker",
        port=28889,
        data_dir=Path("./example_data/worker"),
        bootstrap_nodes=["localhost:28888"]
    )
    worker = Node(worker_config)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
    complex_task = Task(
        type=TaskType.SUM,
        data=list(range(1, 101)),  # –°—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
        reward=50.0,
        timeout=60
    )
    
    print(f"1. –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: —Å—É–º–º–∞ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100")
    print(f"   –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {complex_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ú–æ–∫–∞–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    with patch('torrentnode.node.create_torrent', return_value=b'mock_torrent'):
        with patch('torrentnode.node.lt.torrent_info'):
            creator.session = MagicMock()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            # torrent_hash = await creator.distribute_task(complex_task)
            # print(f"2. –ó–∞–¥–∞—á–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Å–µ—Ç–∏")
            # print(f"   –¢–æ—Ä—Ä–µ–Ω—Ç —Ö—ç—à: {torrent_hash[:16]}...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤–æ—Ä–∫–µ—Ä–æ–º
    print(f"3. Worker –æ–±–Ω–∞—Ä—É–∂–∏–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É...")
    
    result = await worker.task_executor.execute(complex_task)
    
    if result.success:
        print(f"4. –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.result}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.3f}—Å")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        worker.reward_system.init_balance(worker.node_id)
        worker.reward_system.add_reward(worker.node_id, complex_task.reward, complex_task.id)
        
        print(f"5. Worker –ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {complex_task.reward} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   –ë–∞–ª–∞–Ω—Å: {worker.get_balance()} —Ç–æ–∫–µ–Ω–æ–≤")
    
    print("\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


async def stress_test_example():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á"""
    print("\n‚ö° –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    config = NodeConfig(
        name="stress_test_node",
        port=38888,
        data_dir=Path("./example_data/stress_test")
    )
    node = Node(config)
    node.reward_system.init_balance(node.node_id)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    tasks = []
    
    # 10 –∑–∞–¥–∞—á —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    for i in range(10):
        tasks.append(Task(
            type=TaskType.SUM,
            data=list(range(i*10, (i+1)*10)),
            reward=5.0
        ))
    
    # 5 –∑–∞–¥–∞—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    for i in range(5):
        import random
        data = list(range(20))
        random.shuffle(data)
        tasks.append(Task(
            type=TaskType.SORT,
            data=data,
            reward=3.0
        ))
    
    # 5 –∑–∞–¥–∞—á —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    for i in range(5):
        tasks.append(Task(
            type=TaskType.HASH,
            data=f"Test string {i} for hashing",
            reward=2.0
        ))
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    start_time = time.time()
    successful = 0
    failed = 0
    total_reward = 0.0
    
    print("\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
    
    for i, task in enumerate(tasks):
        result = await node.task_executor.execute(task)
        
        if result.success:
            successful += 1
            total_reward += task.reward
            node.reward_system.add_reward(node.node_id, task.reward, task.id)
            
            if (i + 1) % 5 == 0:
                print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ {i + 1}/{len(tasks)} –∑–∞–¥–∞—á...")
        else:
            failed += 1
            print(f"  ‚úó –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {i + 1}: {result.error}")
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print(f"  –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful}")
    print(f"  –û—à–∏–±–æ–∫: {failed}")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {total_time/len(tasks):.3f}—Å")
    print(f"  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_reward}")
    print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {node.get_balance()}")
    
    print("\n‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    print("TorrentNode Net - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=====================================\n")
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:")
    print("1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä (2 –Ω–æ–¥—ã, –∑–∞–¥–∞—á–∏, –ø–µ—Ä–µ–≤–æ–¥—ã)")
    print("2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    print("3. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á)")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ")
    
    try:
        if choice == "1":
            asyncio.run(run_example())
        elif choice == "2":
            asyncio.run(demo_distributed_task())
        elif choice == "3":
            asyncio.run(stress_test_example())
        elif choice == "4":
            asyncio.run(run_example())
            asyncio.run(demo_distributed_task())
            asyncio.run(stress_test_example())
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 