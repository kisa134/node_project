#!/bin/bash

# TorrentNode Net Bootstrap Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞

set -e

echo "üöÄ TorrentNode Net Bootstrap"
echo "==========================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
status() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

error() {
    echo -e "${RED}[‚úó]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
check_python() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    if command -v python3.11 &> /dev/null; then
        PYTHON_CMD=python3.11
    elif command -v python3 &> /dev/null; then
        PYTHON_CMD=python3
    elif command -v python &> /dev/null; then
        PYTHON_CMD=python
    else
        error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.11+"
    fi
    
    PYTHON_VERSION=$($PYTHON_CMD --version 2>&1 | awk '{print $2}')
    status "Python –≤–µ—Ä—Å–∏—è: $PYTHON_VERSION"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    REQUIRED_VERSION="3.11"
    if ! $PYTHON_CMD -c "import sys; exit(0 if sys.version_info >= (3, 11) else 1)"; then
        error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11 –∏–ª–∏ –≤—ã—à–µ"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry
check_poetry() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Poetry..."
    if ! command -v poetry &> /dev/null; then
        warning "Poetry –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        curl -sSL https://install.python-poetry.org | $PYTHON_CMD -
        export PATH="$HOME/.local/bin:$PATH"
        
        if ! command -v poetry &> /dev/null; then
            error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Poetry"
        fi
    fi
    status "Poetry —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ -f "pyproject.toml" ]; then
        poetry install
        status "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Poetry"
    elif [ -f "requirements.txt" ]; then
        $PYTHON_CMD -m pip install -r requirements.txt
        status "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ pip"
    else
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π requirements.txt –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        warning "–§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—é requirements.txt..."
        cat > requirements.txt << EOF
python-libtorrent>=2.0.0
cryptography>=41.0.0
web3>=6.0.0
aiofiles>=23.0.0
aiohttp>=3.9.0
pydantic>=2.0.0
click>=8.1.0
rich>=13.0.0
structlog>=24.0.0
python-dotenv>=1.0.0
psutil>=5.9.0
numpy>=1.24.0
requests>=2.31.0
bencodepy>=0.9.5
kademlia>=2.2.2
fastapi>=0.100.0
uvicorn>=0.23.0
EOF
        $PYTHON_CMD -m pip install -r requirements.txt
        status "–ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p torrentnode
    mkdir -p tests
    mkdir -p infra
    mkdir -p .github/workflows
    mkdir -p logs
    mkdir -p data
    mkdir -p torrents
    status "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
check_docker() {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if command -v docker &> /dev/null; then
        status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        if command -v docker-compose &> /dev/null; then
            status "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞
generate_env() {
    if [ ! -f ".env" ]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        cat > .env << EOF
# TorrentNode Net Configuration
NODE_NAME=node_$(date +%s)
NODE_PORT=8888
LOG_LEVEL=INFO
DATA_DIR=./data
TORRENT_DIR=./torrents
TOKEN_DB=./tokens.db

# Network settings
DHT_ENABLED=true
BOOTSTRAP_NODES=
MAX_PEERS=50
UPLOAD_RATE_LIMIT=0
DOWNLOAD_RATE_LIMIT=0

# Security
ENABLE_ENCRYPTION=true
SECRET_KEY=$(openssl rand -hex 32)

# Task execution
MAX_CONCURRENT_TASKS=5
TASK_TIMEOUT=300
SANDBOX_ENABLED=true

# Rewards
INITIAL_BALANCE=100
TASK_REWARD=10

# Web3 (optional)
WEB3_ENABLED=false
ETH_NETWORK=sepolia
ETH_PRIVATE_KEY=
ETH_CONTRACT_ADDRESS=
EOF
        status ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        status ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã
run_node() {
    echo ""
    echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω—É –Ω–æ–¥—É"
    echo "  2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–¥"
    echo "  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker"
    echo "  4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo "  5. –í—ã—Ö–æ–¥"
    echo ""
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): " choice
    
    case $choice in
        1)
            echo "–ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã..."
            if [ -f "pyproject.toml" ]; then
                poetry run python -m torrentnode.node
            else
                $PYTHON_CMD -m torrentnode.node
            fi
            ;;
        2)
            echo "–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –Ω–æ–¥—ã –Ω–∞ –ø–æ—Ä—Ç—É 8888..."
            if [ -f "pyproject.toml" ]; then
                poetry run python -m torrentnode.node --port 8888 --name node1 &
                NODE1_PID=$!
                sleep 3
                echo "–ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–π –Ω–æ–¥—ã –Ω–∞ –ø–æ—Ä—Ç—É 8889..."
                poetry run python -m torrentnode.node --port 8889 --name node2 --bootstrap localhost:8888 &
                NODE2_PID=$!
                echo ""
                echo "–ù–æ–¥—ã –∑–∞–ø—É—â–µ–Ω—ã! PID: $NODE1_PID, $NODE2_PID"
                echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                wait
            else
                $PYTHON_CMD -m torrentnode.node --port 8888 --name node1 &
                NODE1_PID=$!
                sleep 3
                $PYTHON_CMD -m torrentnode.node --port 8889 --name node2 --bootstrap localhost:8888 &
                NODE2_PID=$!
                echo ""
                echo "–ù–æ–¥—ã –∑–∞–ø—É—â–µ–Ω—ã! PID: $NODE1_PID, $NODE2_PID"
                echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                wait
            fi
            ;;
        3)
            if command -v docker-compose &> /dev/null; then
                echo "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker..."
                docker-compose -f infra/docker-compose.yml up
            else
                error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            fi
            ;;
        4)
            echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
            if [ -f "pyproject.toml" ]; then
                poetry run pytest
            else
                $PYTHON_CMD -m pytest
            fi
            ;;
        5)
            echo "–í—ã—Ö–æ–¥"
            exit 0
            ;;
        *)
            error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo ""
    check_python
    check_poetry
    setup_directories
    install_dependencies
    check_docker
    generate_env
    echo ""
    run_node
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'echo ""; echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞..."; kill $(jobs -p) 2>/dev/null; exit' INT

# –ó–∞–ø—É—Å–∫
main 