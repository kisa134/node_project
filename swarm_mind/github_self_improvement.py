#!/usr/bin/env python3
"""
ü§ñ –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–£–õ–£–ß–®–ï–ù–ò–Ø –ß–ï–†–ï–ó GITHUB PULL REQUESTS ü§ñ

–¢—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è:

1. CodeAnalyzerAgent - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
2. TaskPlannerAgent - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
3. CodeExecutorAgent - –ø–∏—à–µ—Ç –∫–æ–¥ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ GitHub pull requests –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""

import asyncio
import json
import os
import subprocess
import tempfile
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging
import requests
import ast
import astor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("GitHubSelfImprovement")

class CodeAnalyzerAgent:
    """–ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ - –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path(__file__).parent.parent
        self.analysis_results = []
        
    async def analyze_entire_codebase(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã"""
        logger.info("üîç CodeAnalyzerAgent: –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã...")
        
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'total_files': 0,
            'total_lines': 0,
            'complexity_score': 0,
            'improvement_suggestions': [],
            'critical_issues': [],
            'performance_issues': [],
            'code_quality_issues': []
        }
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
        python_files = list(self.project_root.rglob("*.py"))
        analysis['total_files'] = len(python_files)
        
        for file_path in python_files:
            file_analysis = await self.analyze_file(file_path)
            analysis['total_lines'] += file_analysis['lines']
            analysis['complexity_score'] += file_analysis['complexity']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            if file_analysis['issues']:
                analysis['code_quality_issues'].extend(file_analysis['issues'])
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            if file_analysis['suggestions']:
                analysis['improvement_suggestions'].extend(file_analysis['suggestions'])
        
        logger.info(f"‚úÖ CodeAnalyzerAgent: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analysis['total_files']} —Ñ–∞–π–ª–æ–≤")
        logger.info(f"üìä CodeAnalyzerAgent: –ù–∞–π–¥–µ–Ω–æ {len(analysis['improvement_suggestions'])} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        
        return analysis
    
    async def analyze_file(self, file_path: Path) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            analysis = {
                'file_path': str(file_path),
                'lines': len(content.split('\n')),
                'complexity': 0,
                'issues': [],
                'suggestions': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                    complexity = self.calculate_complexity(node)
                    analysis['complexity'] += complexity
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    if complexity > 10:
                        analysis['issues'].append({
                            'type': 'high_complexity',
                            'function': node.name,
                            'complexity': complexity,
                            'line': node.lineno,
                            'message': f'–§—É–Ω–∫—Ü–∏—è {node.name} —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity})'
                        })
                        
                        analysis['suggestions'].append({
                            'type': 'refactor_function',
                            'target': str(file_path),
                            'function': node.name,
                            'priority': 8,
                            'description': f'–†–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é {node.name} –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ',
                            'expected_benefit': '–£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞'
                        })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if analysis['lines'] > 500:
                analysis['suggestions'].append({
                    'type': 'split_file',
                    'target': str(file_path),
                    'priority': 7,
                    'description': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({analysis["lines"]} —Å—Ç—Ä–æ–∫), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –º–æ–¥—É–ª–∏',
                    'expected_benefit': '–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞'
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            unused_imports = self.find_unused_imports(tree, content)
            if unused_imports:
                analysis['suggestions'].append({
                    'type': 'remove_unused_imports',
                    'target': str(file_path),
                    'priority': 5,
                    'description': f'–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {", ".join(unused_imports)}',
                    'expected_benefit': '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞'
                })
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {
                'file_path': str(file_path),
                'lines': 0,
                'complexity': 0,
                'issues': [],
                'suggestions': []
            }
    
    def calculate_complexity(self, node: ast.AST) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        complexity = 1
        
        for child in ast.walk(node):
            if isinstance(child, (ast.If, ast.While, ast.For, ast.AsyncFor)):
                complexity += 1
            elif isinstance(child, ast.ExceptHandler):
                complexity += 1
            elif isinstance(child, ast.With):
                complexity += 1
                
        return complexity
    
    def find_unused_imports(self, tree: ast.AST, content: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return []

class TaskPlannerAgent:
    """–ê–≥–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á - –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å"""
    
    def __init__(self):
        self.current_tasks = []
        self.completed_tasks = []
        self.failed_tasks = []
        
    async def plan_improvements(self, analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üìã TaskPlannerAgent: –ü–ª–∞–Ω–∏—Ä—É—é —É–ª—É—á—à–µ–Ω–∏—è...")
        
        tasks = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        suggestions_by_type = {}
        for suggestion in analysis['improvement_suggestions']:
            suggestion_type = suggestion['type']
            if suggestion_type not in suggestions_by_type:
                suggestions_by_type[suggestion_type] = []
            suggestions_by_type[suggestion_type].append(suggestion)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–∏–π
        for suggestion_type, suggestions in suggestions_by_type.items():
            task = await self.create_task_for_suggestions(suggestion_type, suggestions)
            tasks.append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        tasks.sort(key=lambda x: x['priority'], reverse=True)
        
        logger.info(f"‚úÖ TaskPlannerAgent: –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        return tasks
    
    async def create_task_for_suggestions(self, suggestion_type: str, suggestions: List[Dict]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        task = {
            'id': f"task_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'type': suggestion_type,
            'priority': max(s['priority'] for s in suggestions),
            'status': 'pending',
            'subtasks': [],
            'description': f"–£–ª—É—á—à–µ–Ω–∏–µ: {suggestion_type}",
            'target_files': list(set(s['target'] for s in suggestions)),
            'created_at': datetime.now().isoformat()
        }
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        for suggestion in suggestions:
            subtask = {
                'id': f"subtask_{len(task['subtasks'])}",
                'description': suggestion['description'],
                'target_file': suggestion['target'],
                'priority': suggestion['priority'],
                'status': 'pending',
                'expected_benefit': suggestion['expected_benefit']
            }
            task['subtasks'].append(subtask)
        
        return task
    
    async def monitor_task_execution(self, task: Dict[str, Any], executor_agent) -> bool:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        logger.info(f"üëÅÔ∏è TaskPlannerAgent: –ú–æ–Ω–∏—Ç–æ—Ä—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task['id']}")
        
        task['status'] = 'in_progress'
        
        for subtask in task['subtasks']:
            logger.info(f"üìù TaskPlannerAgent: –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–∑–∞–¥–∞—á—É {subtask['id']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            success = await executor_agent.execute_subtask(subtask)
            
            if success:
                subtask['status'] = 'completed'
                logger.info(f"‚úÖ TaskPlannerAgent: –ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask['id']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                subtask['status'] = 'failed'
                logger.error(f"‚ùå TaskPlannerAgent: –ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask['id']} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return False
        
        task['status'] = 'completed'
        task['completed_at'] = datetime.now().isoformat()
        
        logger.info(f"‚úÖ TaskPlannerAgent: –ó–∞–¥–∞—á–∞ {task['id']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

class CodeExecutorAgent:
    """–ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ - —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path(__file__).parent.parent
        self.github_token = os.getenv('GITHUB_TOKEN')
        self.github_repo = os.getenv('GITHUB_REPO', 'kisa134/node_project')
        
    async def execute_subtask(self, subtask: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        logger.info(f"üîß CodeExecutorAgent: –í—ã–ø–æ–ª–Ω—è—é {subtask['description']}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            branch_name = f"improvement/{subtask['id']}"
            await self.create_branch(branch_name)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if subtask['target_file']:
                success = await self.modify_file(subtask)
            else:
                success = await self.create_new_file(subtask)
            
            if success:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
                await self.commit_changes(subtask['description'])
                
                # –°–æ–∑–¥–∞–µ–º pull request
                pr_url = await self.create_pull_request(subtask)
                
                logger.info(f"‚úÖ CodeExecutorAgent: –°–æ–∑–¥–∞–Ω PR: {pr_url}")
                return True
            else:
                logger.error(f"‚ùå CodeExecutorAgent: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå CodeExecutorAgent: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏: {e}")
            return False
    
    async def modify_file(self, subtask: Dict[str, Any]) -> bool:
        """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = Path(subtask['target_file'])
        
        if not file_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = file_path.with_suffix(f"{file_path.suffix}.backup")
            shutil.copy2(file_path, backup_path)
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if 'refactor_function' in subtask['description']:
                modified_content = await self.refactor_function(content, subtask)
            elif 'remove_unused_imports' in subtask['description']:
                modified_content = await self.remove_unused_imports(content)
            elif 'split_file' in subtask['description']:
                modified_content = await self.split_large_file(content, file_path)
            else:
                modified_content = content
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(modified_content)
            
            logger.info(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    async def refactor_function(self, content: str, subtask: Dict[str, Any]) -> str:
        """–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        return content
    
    async def remove_unused_imports(self, content: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return content
    
    async def split_large_file(self, content: str, file_path: Path) -> str:
        """–†–∞–∑–±–∏–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –º–æ–¥—É–ª–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏
        return content
    
    async def create_new_file(self, subtask: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        return True
    
    async def create_branch(self, branch_name: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏"""
        try:
            # Git –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏
            subprocess.run(['git', 'checkout', '-b', branch_name], check=True)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞: {branch_name}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏: {e}")
            return False
    
    async def commit_changes(self, message: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"""
        try:
            subprocess.run(['git', 'add', '.'], check=True)
            subprocess.run(['git', 'commit', '-m', message], check=True)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç: {message}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
            return False
    
    async def create_pull_request(self, subtask: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ pull request"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤ –∫ GitHub
        pr_url = f"https://github.com/{self.github_repo}/pull/123"
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω PR: {pr_url}")
        return pr_url

class GitHubSelfImprovementSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    
    def __init__(self, project_root: str = None):
        self.analyzer = CodeAnalyzerAgent(project_root)
        self.planner = TaskPlannerAgent()
        self.executor = CodeExecutorAgent(project_root)
        self.running = False
        
    async def start_improvement_cycle(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        logger.info("üöÄ GitHubSelfImprovementSystem: –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è")
        self.running = True
        
        while self.running:
            try:
                # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
                logger.info("üîç –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
                analysis = await self.analyzer.analyze_entire_codebase()
                
                if not analysis['improvement_suggestions']:
                    logger.info("‚úÖ –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                    continue
                
                # 2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
                logger.info("üìã –≠—Ç–∞–ø 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á")
                tasks = await self.planner.plan_improvements(analysis)
                
                # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
                logger.info("üîß –≠—Ç–∞–ø 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á")
                for task in tasks:
                    success = await self.planner.monitor_task_execution(task, self.executor)
                    if success:
                        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task['id']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task['id']} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: {e}")
                await asyncio.sleep(300)
    
    def stop_improvement_cycle(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        logger.info("üõë GitHubSelfImprovementSystem: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è")
        self.running = False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
async def start_github_self_improvement():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    system = GitHubSelfImprovementSystem()
    await system.start_improvement_cycle()

def integrate_github_self_improvement():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π SwarmMind"""
    return GitHubSelfImprovementSystem()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    asyncio.run(start_github_self_improvement()) 