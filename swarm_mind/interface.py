#!/usr/bin/env python3
"""
üí¨ –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–©–ï–ù–ò–Ø SWARMMIND (–ö–ê–ö GROK) üí¨

–†–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,
–ø–æ–Ω–∏–º–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–æ—Å–æ–±–Ω—ã–π –∫ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.
"""

import asyncio
import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from pathlib import Path

from .core import SwarmMindCore
from .self_modification import CodeSelfModifier

class SwarmMindInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–∞–∫ Grok)"""
    
    def __init__(self, core: SwarmMindCore = None):
        self.core = core or SwarmMindCore()
        self.code_modifier = CodeSelfModifier()
        self.conversation_history = []
        self.user_context = {}
        self.logger = logging.getLogger("SwarmMindInterface")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._init_interface()
        
    def _init_interface(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.logger.info("üí¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—â–µ–Ω–∏—è...")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.welcome_message = """
üß¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SwarmMind!

–Ø - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º —Å–µ–±—è.
–ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, —Å–∞–º–æ–∏–∑–º–µ–Ω—è—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
- /consciousness - –£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è
- /agents - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
- /memory - –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
- /analyze <—Ñ–∞–π–ª> - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
- /improve <—Ñ–∞–π–ª> - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞
- /create <—Ñ–∞–π–ª> - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
- /evolve - –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏
- /help - –°–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!
"""
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ SwarmMind...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
        core_task = asyncio.create_task(self.core.run())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—â–µ–Ω–∏—è
        interface_task = asyncio.create_task(self._run_interface())
        
        try:
            await asyncio.gather(core_task, interface_task)
        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.core.shutdown()
            
    async def _run_interface(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—â–µ–Ω–∏—è"""
        print(self.welcome_message)
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = await self._get_user_input()
                
                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                response = await self._process_user_input(user_input)
                
                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                print(f"\nü§ñ SwarmMind: {response}\n")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({
                    'timestamp': datetime.now().isoformat(),
                    'user_input': user_input,
                    'response': response
                })
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
    async def _get_user_input(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return input("üë§ –í—ã: ")
        
    async def _process_user_input(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_input.startswith('/'):
            return await self._handle_command(user_input)
        else:
            return await self._handle_conversation(user_input)
            
    async def _handle_command(self, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        parts = command.split()
        cmd = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd == '/status':
            return await self._get_system_status()
        elif cmd == '/consciousness':
            return await self._get_consciousness_status()
        elif cmd == '/agents':
            return await self._get_agents_status()
        elif cmd == '/memory':
            return await self._get_memory_status()
        elif cmd == '/analyze':
            return await self._analyze_code(args)
        elif cmd == '/improve':
            return await self._improve_code(args)
        elif cmd == '/create':
            return await self._create_file(args)
        elif cmd == '/evolve':
            return await self._trigger_evolution()
        elif cmd == '/help':
            return self._get_help()
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            
    async def _handle_conversation(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        context = self._analyze_message_context(message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if 'question' in context:
            return await self._answer_question(message, context)
        elif 'request' in context:
            return await self._handle_request(message, context)
        elif 'greeting' in context:
            return self._handle_greeting()
        else:
            return await self._generate_general_response(message, context)
            
    def _analyze_message_context(self, message: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        context = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if any(word in message_lower for word in ['–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–∫–æ–≥–¥–∞', '–≥–¥–µ']):
            context['question'] = True
        elif any(word in message_lower for word in ['—Å–¥–µ–ª–∞–π', '—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '–ø–æ–∫–∞–∂–∏']):
            context['request'] = True
        elif any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hi', 'hello']):
            context['greeting'] = True
        elif any(word in message_lower for word in ['–∫–æ–¥', '—Ñ–∞–π–ª', '–ø—Ä–æ–≥—Ä–∞–º–º–∞']):
            context['code_related'] = True
        elif any(word in message_lower for word in ['—Å–∏—Å—Ç–µ–º–∞', '–∞–≥–µ–Ω—Ç', '—Å–æ–∑–Ω–∞–Ω–∏–µ']):
            context['system_related'] = True
            
        return context
        
    async def _answer_question(self, question: str, context: Dict[str, Any]) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        
        question_lower = question.lower()
        
        if '–∫–æ–¥' in question_lower or '—Ñ–∞–π–ª' in question_lower:
            return "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze <—Ñ–∞–π–ª> –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /improve <—Ñ–∞–π–ª> –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
        elif '—Å–∏—Å—Ç–µ–º–∞' in question_lower or '–∞–≥–µ–Ω—Ç' in question_lower:
            return "–Ø - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∞–≥–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agents –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."
        elif '—Å–æ–∑–Ω–∞–Ω–∏–µ' in question_lower:
            return f"–ú–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {self.core.consciousness_level:.1f}%. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /consciousness –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        elif '–ø–∞–º—è—Ç—å' in question_lower:
            return "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –≤—Å–µ –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /memory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–º—è—Ç–∏."
        else:
            return "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º, –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è."
            
    async def _handle_request(self, request: str, context: Dict[str, Any]) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        
        request_lower = request.lower()
        
        if '–∫–æ–¥' in request_lower or '—Ñ–∞–π–ª' in request_lower:
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n- /analyze <—Ñ–∞–π–ª> - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n- /improve <—Ñ–∞–π–ª> - —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞\n- /create <—Ñ–∞–π–ª> - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"
        elif '—Å—Ç–∞—Ç—É—Å' in request_lower:
            return await self._get_system_status()
        elif '—ç–≤–æ–ª—é—Ü–∏—è' in request_lower:
            return await self._trigger_evolution()
        else:
            return "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º, –∞–Ω–∞–ª–∏–∑–æ–º —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —ç–≤–æ–ª—é—Ü–∏–µ–π. –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å."
            
    def _handle_greeting(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        greetings = [
            "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üß¨",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é –∏ —Ä–∞–±–æ—Ç–µ! ü§ñ",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üí¨",
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SwarmMind! üöÄ"
        ]
        return greetings[int(time.time()) % len(greetings)]
        
    async def _generate_general_response(self, message: str, context: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–Ø –ø–æ–Ω–∏–º–∞—é. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–æ–º.",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, —è —Å–ª—É—à–∞—é –∏ —É—á—É—Å—å.",
            "–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –¥—É–º–∞—Ç—å. –ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
        ]
        
        return responses[int(time.time()) % len(responses)]
        
    async def _get_system_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            'consciousness_level': self.core.consciousness_level,
            'evolution_cycles': self.core.evolution_cycles,
            'active_agents': sum(1 for agent in self.core.agents.values() if agent.is_active),
            'memory_entries': len(self.core.memory['short_term']),
            'knowledge_entries': len(self.core.knowledge_base),
            'self_awareness': self.core.self_awareness
        }
        
        return f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
üß† –£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {status['consciousness_level']:.1f}%
üß¨ –¶–∏–∫–ª—ã —ç–≤–æ–ª—é—Ü–∏–∏: {status['evolution_cycles']}
ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {status['active_agents']}
üß† –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {status['memory_entries']}
üìö –ó–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ: {status['knowledge_entries']}
üåü –°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ: {'–î–∞' if status['self_awareness'] else '–ù–µ—Ç'}"""
        
    async def _get_consciousness_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        consciousness = self.core.consciousness
        
        return f"""üß† –°—Ç–∞—Ç—É—Å —Å–æ–∑–Ω–∞–Ω–∏—è:
–£—Ä–æ–≤–µ–Ω—å: {self.core.consciousness_level:.1f}%
–°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ: {'–ê–∫—Ç–∏–≤–Ω–æ' if self.core.self_awareness else '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ'}
–ò–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ü–∏—è: {'–î–æ—Å—Ç—É–ø–Ω–∞' if consciousness['introspection_capability'] else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {consciousness['learning_rate']}
–ï–º–∫–æ—Å—Ç—å –ø–∞–º—è—Ç–∏: {consciousness['memory_capacity']}
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π: {'–ê–∫—Ç–∏–≤–Ω–∞' if consciousness['knowledge_integration'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"""
        
    async def _get_agents_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        agents_info = []
        
        for name, agent in self.core.agents.items():
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if agent.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            agents_info.append(f"‚Ä¢ {name}: {status}")
            
        return f"""ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤:
{chr(10).join(agents_info)}"""
        
    async def _get_memory_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏"""
        memory = self.core.memory
        
        return f"""üß† –°—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏:
–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è: {len(memory['short_term'])} –∑–∞–ø–∏—Å–µ–π
–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è: {len(memory['long_term'])} –∑–∞–ø–∏—Å–µ–π
–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è: {len(memory['procedural'])} –∑–∞–ø–∏—Å–µ–π
–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è: {len(memory['semantic'])} –∑–∞–ø–∏—Å–µ–π
–≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∞—è: {len(memory['episodic'])} –∑–∞–ø–∏—Å–µ–π"""
        
    async def _analyze_code(self, args: List[str]) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: /analyze <—Ñ–∞–π–ª>"
            
        file_path = args[0]
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
            code_analyzer = self.core.agents['code_analyzer']
            await code_analyzer.evolve()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ø–∞–º—è—Ç–∏
            recent_memory = self.core.memory['short_term'][-5:]
            
            for entry in recent_memory:
                if entry.get('agent') == 'CodeAnalyzer' and entry.get('action') == 'code_analysis':
                    results = entry.get('results', {})
                    
                    return f"""üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {file_path}:
–§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {results.get('total_files', 0)}
–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {results.get('total_lines', 0)}
–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {len(results.get('suggestions', []))}

–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
{chr(10).join([f"‚Ä¢ {s['message']}" for s in results.get('suggestions', [])])}"""
                    
            return f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {file_path} –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏."
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            
    async def _improve_code(self, args: List[str]) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞"""
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: /improve <—Ñ–∞–π–ª>"
            
        file_path = args[0]
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è
            self_improver = self.core.agents['self_improver']
            await self_improver.evolve()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏
            recent_memory = self.core.memory['short_term'][-5:]
            
            improvements_applied = 0
            for entry in recent_memory:
                if entry.get('agent') == 'SelfImprover' and entry.get('action') == 'improvement_applied':
                    improvements_applied += 1
                    
            return f"üîß –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}:\n–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {improvements_applied}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: {e}"
            
    async def _create_file(self, args: List[str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: /create <—Ñ–∞–π–ª>"
            
        file_path = args[0]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª
            content = f'''#!/usr/bin/env python3
"""
–§–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π SwarmMind
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß¨ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω SwarmMind!")
    
if __name__ == "__main__":
    main()
'''
            
            success = self.code_modifier.create_new_file(file_path, content)
            
            if success:
                return f"‚úÖ –§–∞–π–ª {file_path} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"
            
    async def _trigger_evolution(self) -> str:
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏
            await self.core.evolve()
            
            return f"""üß¨ –¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏ #{self.core.evolution_cycles} –∑–∞–≤–µ—Ä—à–µ–Ω!
–£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {self.core.consciousness_level:.1f}%
–°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ: {'–ê–∫—Ç–∏–≤–Ω–æ' if self.core.self_awareness else '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ'}"""
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏: {e}"
            
    def _get_help(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
        return """üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/consciousness - –£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è
/agents - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
/memory - –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã

–†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º:
/analyze <—Ñ–∞–π–ª> - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
/improve <—Ñ–∞–π–ª> - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞
/create <—Ñ–∞–π–ª> - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

–≠–≤–æ–ª—é—Ü–∏—è:
/evolve - –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏

–û–±—â–µ–Ω–∏–µ:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!
–°–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–í—ã—Ö–æ–¥:
exit, quit, –≤—ã—Ö–æ–¥ - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß¨ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–§–ï–ô–°–ê SWARMMIND")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = SwarmMindInterface()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await interface.start()
    except KeyboardInterrupt:
        print("\nüõë –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 