# The MIT License (MIT)
# Copyright ¬© 2025 <kisa134>

import asyncio
import json
import time
import subprocess
import os
import requests
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import statistics
import ast
import inspect
from swarm_mind.logger import log_event

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    timestamp: datetime
    tasks_completed: int
    average_response_time: float
    success_rate: float
    error_count: int
    memory_usage: float
    cpu_usage: float
    network_latency: float
    code_quality_score: float

@dataclass
class ImprovementSuggestion:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    module: str
    priority: int  # 1-10
    description: str
    code_change: str
    expected_benefit: str
    risk_level: int  # 1-5
    estimated_impact: float

class SelfImprover:
    """
    üß† –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –Ø–î–†–û –°–ê–ú–û–£–õ–£–ß–®–ï–ù–ò–Ø üß†
    
    –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:
    1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ LLM
    3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
    4. –ü—Ä–∏–º–µ–Ω—è—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    5. –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
    """
    
    def __init__(self, ollama_url: str = "http://localhost:11434", model: str = "deepseek-r1:latest"):
        self.ollama_url = ollama_url
        self.model = model
        self.metrics_history: List[PerformanceMetrics] = []
        self.improvement_queue: List[ImprovementSuggestion] = []
        self.applied_improvements: List[Dict] = []
        self.running = False
        
        print("üß† [SELF-IMPROVER] Initializing revolutionary self-improvement core...")
        print("üî¨ [SELF-IMPROVER] Preparing to achieve technological singularity...")
        
    async def start_evolution(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        self.running = True
        print("üöÄ [SELF-IMPROVER] EVOLUTION PROTOCOL ACTIVATED!")
        
        while self.running:
            try:
                # 1. –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                metrics = await self.collect_performance_metrics()
                self.metrics_history.append(metrics)
                
                # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
                analysis = await self.analyze_performance_trends()
                
                # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                if analysis['needs_improvement']:
                    suggestions = await self.generate_improvements(analysis)
                    self.improvement_queue.extend(suggestions)
                
                # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—É—á—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
                if self.improvement_queue:
                    await self.apply_best_improvements()
                
                # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self.validate_improvements()
                
                # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(60)
                
            except Exception as e:
                print(f"‚ùå [SELF-IMPROVER] Evolution cycle error: {e}")
                await asyncio.sleep(30)
    
    async def collect_performance_metrics(self) -> PerformanceMetrics:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        import psutil
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        memory_usage = psutil.virtual_memory().percent
        cpu_usage = psutil.cpu_percent(interval=1)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
        network_latency = await self.measure_network_latency()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–∞—á (–ø–æ–ª—É—á–∞–µ–º –∏–∑ –ª–æ–≥–æ–≤)
        task_metrics = await self.analyze_task_performance()
        
        metrics = PerformanceMetrics(
            timestamp=datetime.now(),
            tasks_completed=task_metrics.get('completed', 0),
            average_response_time=task_metrics.get('avg_time', 0.0),
            success_rate=task_metrics.get('success_rate', 0.0),
            error_count=task_metrics.get('errors', 0),
            memory_usage=memory_usage,
            cpu_usage=cpu_usage,
            network_latency=network_latency,
            code_quality_score=await self.analyze_code_quality()
        )
        
        print(f"üìä [METRICS] Tasks: {metrics.tasks_completed}, Success: {metrics.success_rate:.1%}, CPU: {metrics.cpu_usage:.1f}%")
        return metrics
    
    async def analyze_performance_trends(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if len(self.metrics_history) < 3:
            return {'needs_improvement': False, 'reason': 'insufficient_data'}
        
        recent_metrics = self.metrics_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        success_rates = [m.success_rate for m in recent_metrics]
        response_times = [m.average_response_time for m in recent_metrics]
        error_counts = [m.error_count for m in recent_metrics]
        
        analysis = {
            'avg_success_rate': statistics.mean(success_rates),
            'success_trend': 'declining' if success_rates[-1] < success_rates[0] else 'improving',
            'avg_response_time': statistics.mean(response_times),
            'response_trend': 'slower' if response_times[-1] > response_times[0] else 'faster',
            'total_errors': sum(error_counts),
            'needs_improvement': False,
            'issues': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —É–ª—É—á—à–µ–Ω–∏—è—Ö
        if analysis['avg_success_rate'] < 0.9:
            analysis['needs_improvement'] = True
            analysis['issues'].append('low_success_rate')
            
        if analysis['avg_response_time'] > 5.0:
            analysis['needs_improvement'] = True
            analysis['issues'].append('slow_response')
            
        if analysis['total_errors'] > 10:
            analysis['needs_improvement'] = True
            analysis['issues'].append('high_error_rate')
            
        print(f"üìà [ANALYSIS] Success: {analysis['avg_success_rate']:.1%}, Issues: {analysis['issues']}")
        return analysis
    
    async def generate_improvements(self, analysis: Dict) -> List[ImprovementSuggestion]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM"""
        print("üß† [AI-EVOLUTION] Asking AI to improve itself...")
        
        prompt = f"""
You are an AI system analyzing your own performance and generating improvements.

Current Performance Analysis:
{json.dumps(analysis, indent=2)}

System Issues Detected: {analysis['issues']}

Generate 3 specific code improvements to fix these issues. For each improvement, provide:
1. Target module/file to modify
2. Specific code change 
3. Expected benefit
4. Risk assessment (1-5)

Respond in JSON format:
{{
  "improvements": [
    {{
      "module": "swarm_mind/validators/llm_validator.py",
      "priority": 8,
      "description": "Add retry mechanism with exponential backoff",
      "code_change": "Add try-catch with time.sleep(2**attempt) for retries",
      "expected_benefit": "Reduce connection failures by 80%",
      "risk_level": 2,
      "estimated_impact": 0.15
    }}
  ]
}}
"""
        
        try:
            response = await self.call_ollama(prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                improvements_data = json.loads(json_match.group())
                suggestions = []
                
                for imp in improvements_data.get('improvements', []):
                    suggestion = ImprovementSuggestion(
                        module=imp['module'],
                        priority=imp['priority'],
                        description=imp['description'],
                        code_change=imp['code_change'],
                        expected_benefit=imp['expected_benefit'],
                        risk_level=imp['risk_level'],
                        estimated_impact=imp['estimated_impact']
                    )
                    suggestions.append(suggestion)
                
                print(f"üí° [AI-IMPROVEMENTS] Generated {len(suggestions)} improvement suggestions")
                log_event('SelfImprover: generated improvements')
                return suggestions
                
        except Exception as e:
            print(f"‚ùå [AI-EVOLUTION] Error generating improvements: {e}")
        
        return []
    
    async def apply_best_improvements(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        if not self.improvement_queue:
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –Ω–∏–∑–∫–æ–º—É —Ä–∏—Å–∫—É
        safe_improvements = [
            imp for imp in self.improvement_queue 
            if imp.risk_level <= 3 and imp.priority >= 6
        ]
        
        if not safe_improvements:
            print("‚ö†Ô∏è [SELF-IMPROVER] No safe improvements available")
            return
            
        best_improvement = max(safe_improvements, key=lambda x: x.priority * x.estimated_impact)
        
        print(f"üîß [APPLYING] {best_improvement.description}")
        print(f"üìç [TARGET] {best_improvement.module}")
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        await self.backup_module(best_improvement.module)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–ª–æ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º)
        success = await self.apply_code_change(best_improvement)
        
        if success:
            self.applied_improvements.append({
                'improvement': asdict(best_improvement),
                'applied_at': datetime.now().isoformat(),
                'status': 'applied'
            })
            print(f"‚úÖ [SUCCESS] Applied improvement to {best_improvement.module}")
            log_event('SelfImprover: applied improvements')
        else:
            print(f"‚ùå [FAILED] Could not apply improvement to {best_improvement.module}")
            await self.restore_module(best_improvement.module)
            
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.improvement_queue.remove(best_improvement)
    
    async def apply_code_change(self, improvement: ImprovementSuggestion) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–µ—Ä AST –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            print(f"üî® [CODE-CHANGE] Would modify {improvement.module}")
            print(f"üìù [DESCRIPTION] {improvement.description}")
            print(f"üíæ [CHANGE] {improvement.code_change}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            await asyncio.sleep(1)
            return True
            
        except Exception as e:
            print(f"‚ùå [CODE-CHANGE] Error: {e}")
            return False
    
    async def call_ollama(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ Ollama API"""
        try:
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.3,
                    "max_tokens": 1000
                }
            }
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json().get("response", "")
            else:
                return ""
                
        except Exception as e:
            print(f"‚ùå [OLLAMA] Error: {e}")
            return ""
    
    async def measure_network_latency(self) -> float:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            start = time.time()
            # Ping localhost (—Å–∏–º—É–ª—è—Ü–∏—è)
            await asyncio.sleep(0.001)
            return (time.time() - start) * 1000
        except:
            return 0.0
    
    async def analyze_task_performance(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á"""
        # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
        return {
            'completed': 10,
            'avg_time': 0.5,
            'success_rate': 0.95,
            'errors': 1
        }
    
    async def analyze_code_quality(self) -> float:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        return 8.5
    
    async def backup_module(self, module_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –º–æ–¥—É–ª—è"""
        backup_path = f"{module_path}.backup_{int(time.time())}"
        print(f"üíæ [BACKUP] Creating backup: {backup_path}")
    
    async def restore_module(self, module_path: str):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –±—ç–∫–∞–ø–∞"""
        print(f"üîÑ [RESTORE] Restoring module: {module_path}")
    
    async def validate_improvements(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        if not self.applied_improvements:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ª—É—á—à–∏–ª–∞—Å—å –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        if len(self.metrics_history) >= 2:
            before = self.metrics_history[-2]
            after = self.metrics_history[-1]
            
            if after.success_rate > before.success_rate:
                print("üìà [VALIDATION] Performance improved after last change!")
            else:
                print("üìâ [VALIDATION] Performance declined, considering rollback...")
    
    def stop_evolution(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        self.running = False
        print("üõë [SELF-IMPROVER] Evolution protocol stopped")

# üåü –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò

async def start_autonomous_evolution():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    improver = SelfImprover()
    await improver.start_evolution()

def integrate_with_swarm_mind():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π SwarmMind"""
    print("üîó [INTEGRATION] Self-improvement module integrated with SwarmMind")
    print("üß† [STATUS] System is now capable of autonomous evolution!")
    return SelfImprover() 