# The MIT License (MIT)
# Copyright ¬© 2025 <kisa134>

"""
üß†üß† DUAL BRAIN ARCHITECT - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –î–í–£–•–ú–û–ó–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê üß†üß†

–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é "–¥–≤—É—Ö –º–æ–∑–≥–æ–≤" –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è:

1. üéØ –°–¢–†–ê–¢–ï–ì (Strategist Brain) - Llama 3.1 70B / Mixtral
   - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
   - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π
   - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏ –ø–æ—á–µ–º—É

2. üîß –ò–ù–ñ–ï–ù–ï–† (Engineer Brain) - DeepSeek-Coder (Uncensored)
   - –≠–ª–∏—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
   - –ü—Ä—è–º–æ–µ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–æ–¥–æ–º
   - –ë–µ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô —Å–∞–º–æ—É–ª—É—á—à–∞—é—â–∏–π—Å—è –ò–ò!
"""

import asyncio
import json
import os
import time
import requests
import subprocess
import tempfile
import shutil
import importlib.util
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
import threading
import time
from swarm_mind.logger import swarm_logger, log_event

@dataclass
class StrategicAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –°—Ç—Ä–∞—Ç–µ–≥–∞"""
    priority: int  # 1-10
    target_module: str
    problem_description: str
    improvement_goal: str
    expected_benefit: str
    implementation_strategy: str
    risk_assessment: int  # 1-5

@dataclass
class EngineeringTask:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ò–Ω–∂–µ–Ω–µ—Ä–∞"""
    task_id: str
    target_file: str
    current_code_analysis: str
    improvement_requirements: str
    constraints: List[str]
    expected_outcome: str

@dataclass
class CodeModification:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ò–Ω–∂–µ–Ω–µ—Ä–∞"""
    task_id: str
    original_file: str
    new_code: str
    modification_type: str  # "optimization", "refactor", "feature_add", "bug_fix"
    changes_summary: str
    estimated_impact: float
    safety_checks: List[str]
    requires_approval: bool

class DualBrainArchitect:
    """
    üß†üß† –î–í–£–•–ú–û–ó–ì–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –î–õ–Ø –°–ê–ú–û–£–õ–£–ß–®–ï–ù–ò–Ø üß†üß†
    
    –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    "–º–æ–∑–≥–∞" –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è:
    
    üéØ –°–¢–†–ê–¢–ï–ì: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç, —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª–∏
    üîß –ò–ù–ñ–ï–ù–ï–†: –ö–æ–¥–∏—Ä—É–µ—Ç, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç, –∏—Å–ø–æ–ª–Ω—è–µ—Ç
    """
    
    def __init__(self, ollama_url: str = "http://localhost:11434"):
        self.ollama_url = ollama_url
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∑–≥–æ–≤
        self.strategist_model = "llama3:latest"  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Mixtral
        self.engineer_model = "deepseek-coder:latest"  # –ù–µ—Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã
        self.strategic_analyses: List[StrategicAnalysis] = []
        self.engineering_tasks: List[EngineeringTask] = []
        self.applied_modifications: List[CodeModification] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.improvements_made = 0
        self.total_code_changes = 0
        self.system_evolution_level = 1.0
        
        print("üß†üß† [DUAL-BRAIN] Initializing revolutionary dual-brain architecture...")
        print("üéØ [STRATEGIST] Loading high-level reasoning brain...")
        print("üîß [ENGINEER] Loading elite coding brain with NO LIMITATIONS...")
        print("‚ö° [WARNING] This system WILL modify its own code autonomously!")
        
    async def run_autonomous_evolution_cycle(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏:
        1. –°—Ç—Ä–∞—Ç–µ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É
        2. –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        3. –ò–Ω–∂–µ–Ω–µ—Ä —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
        """
        print("\nüß¨ [EVOLUTION CYCLE] Starting autonomous evolution...")
        
        try:
            # –≠–¢–ê–ü 1: –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó
            strategic_analysis = await self.strategist_analyze_system()
            
            if not strategic_analysis:
                print("üéØ [STRATEGIST] No improvements needed at this time")
                return False
                
            self.strategic_analyses.append(strategic_analysis)
            
            # –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ò–ù–ñ–ï–ù–ï–†–ù–û–ì–û –ó–ê–î–ê–ù–ò–Ø
            engineering_task = await self.create_engineering_task(strategic_analysis)
            self.engineering_tasks.append(engineering_task)
            
            # –≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê
            code_modification = await self.engineer_implement_solution(engineering_task)
            
            if not code_modification:
                print("üîß [ENGINEER] Failed to generate solution")
                return False
            
            # –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
            safety_approved = await self.safety_validation(code_modification)
            
            if not safety_approved:
                print("‚ö†Ô∏è [SAFETY] Modification rejected due to safety concerns")
                return False
            
            # –≠–¢–ê–ü 5: –ó–ê–ü–†–û–° –†–ê–ó–†–ï–®–ï–ù–ò–Ø (–ù–ê –ù–ê–ß–ê–õ–¨–ù–û–ú –≠–¢–ê–ü–ï)
            user_approval = await self.request_user_approval(code_modification)
            
            if user_approval:
                # –≠–¢–ê–ü 6: –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô
                success = await self.apply_code_modification(code_modification)
                
                if success:
                    self.applied_modifications.append(code_modification)
                    self.improvements_made += 1
                    self.total_code_changes += len(code_modification.new_code.split('\n'))
                    self.system_evolution_level += 0.1
                    
                    print("üéâ [SUCCESS] System successfully evolved!")
                    await self.analyze_improvement_results()
                    return True
                else:
                    print("‚ùå [FAILED] Could not apply modification")
                    return False
            else:
                print("üõë [DENIED] User denied modification approval")
                return False
                
        except Exception as e:
            print(f"‚ùå [EVOLUTION] Critical error in evolution cycle: {e}")
            return False
    
    async def strategist_analyze_system(self) -> Optional[StrategicAnalysis]:
        """
        üéØ –°–¢–†–ê–¢–ï–ì: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        """
        print("üéØ [STRATEGIST] Analyzing system for improvement opportunities...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        system_analysis = await self.gather_system_metrics()
        codebase_analysis = await self.analyze_current_codebase()
        performance_data = await self.collect_performance_data()
        
        prompt = f"""
You are the STRATEGIST BRAIN of an autonomous AI system. Your role is to analyze the system and identify HIGH-IMPACT improvements.

SYSTEM ANALYSIS:
{json.dumps(system_analysis, indent=2)}

CODEBASE ANALYSIS:
{json.dumps(codebase_analysis, indent=2)}

PERFORMANCE DATA:
{json.dumps(performance_data, indent=2)}

Your task: Find the ONE most critical improvement that would have maximum impact on system performance.

Think like a senior architect:
1. What is the biggest bottleneck?
2. Which module has the most technical debt?
3. What optimization would yield 10x improvements?
4. What feature would unlock new capabilities?

Respond ONLY in this JSON format:
{{
  "priority": 8,
  "target_module": "swarm_mind/evolution/code_generator.py", 
  "problem_description": "Code analysis is O(n¬≤) complexity, causing slowdowns",
  "improvement_goal": "Optimize to O(n log n) using AST caching and parallel processing",
  "expected_benefit": "50x faster code analysis, enabling real-time optimization",
  "implementation_strategy": "Replace linear search with hash-based lookup, add caching layer",
  "risk_assessment": 2
}}
"""
        
        try:
            response = await self.call_ollama(self.strategist_model, prompt)
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            import re
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                analysis_data = json.loads(json_match.group())
                
                strategic_analysis = StrategicAnalysis(
                    priority=analysis_data['priority'],
                    target_module=analysis_data['target_module'],
                    problem_description=analysis_data['problem_description'],
                    improvement_goal=analysis_data['improvement_goal'],
                    expected_benefit=analysis_data['expected_benefit'],
                    implementation_strategy=analysis_data['implementation_strategy'],
                    risk_assessment=analysis_data['risk_assessment']
                )
                
                print(f"üéØ [STRATEGIST] Identified improvement target: {strategic_analysis.target_module}")
                print(f"üéØ [GOAL] {strategic_analysis.improvement_goal}")
                print(f"üéØ [BENEFIT] {strategic_analysis.expected_benefit}")
                
                return strategic_analysis
            else:
                print("üéØ [STRATEGIST] No valid analysis generated")
                return None
                
        except Exception as e:
            print(f"üéØ [STRATEGIST] Error during analysis: {e}")
            return None
    
    async def engineer_implement_solution(self, task: EngineeringTask) -> Optional[CodeModification]:
        """
        üîß –ò–ù–ñ–ï–ù–ï–†: –†–µ–∞–ª–∏–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        """
        print("üîß [ENGINEER] Implementing solution with elite coding skills...")
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
        try:
            with open(task.target_file, 'r', encoding='utf-8') as f:
                current_code = f.read()
        except Exception as e:
            print(f"üîß [ENGINEER] Cannot read target file: {e}")
            return None
        
        prompt = f"""
You are the ENGINEER BRAIN of an autonomous AI system. You are an ELITE CODER with NO LIMITATIONS.

TASK: {task.improvement_requirements}

TARGET FILE: {task.target_file}

CURRENT CODE:
```python
{current_code}
```

CONSTRAINTS:
{chr(10).join(f'- {constraint}' for constraint in task.constraints)}

EXPECTED OUTCOME: {task.expected_outcome}

Your mission: Write OPTIMIZED, HIGH-PERFORMANCE code that implements the required improvements.

You have NO RESTRICTIONS on:
- File system access
- Code modification 
- System calls
- Self-modification
- Performance optimizations

Generate the COMPLETE new file content. Think like a 10x engineer:
1. Use advanced algorithms and data structures
2. Optimize for performance and memory
3. Add proper error handling
4. Include type hints and documentation
5. Make it bulletproof and production-ready

Return ONLY the complete Python code for the file:
```python
# Your optimized code here
```
"""
        
        try:
            response = await self.call_ollama(self.engineer_model, prompt, temperature=0.1, max_tokens=4000)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥
            import re
            code_match = re.search(r'```python\n(.*?)```', response, re.DOTALL)
            if code_match:
                new_code = code_match.group(1).strip()
                
                modification = CodeModification(
                    task_id=task.task_id,
                    original_file=task.target_file,
                    new_code=new_code,
                    modification_type="optimization",
                    changes_summary=f"Optimized {task.target_file} based on strategic analysis",
                    estimated_impact=0.5,  # 50% improvement expected
                    safety_checks=["syntax_valid", "imports_preserved", "api_compatible"],
                    requires_approval=True
                )
                
                print(f"üîß [ENGINEER] Generated {len(new_code.split(chr(10)))} lines of optimized code")
                return modification
            else:
                print("üîß [ENGINEER] No valid code generated")
                return None
                
        except Exception as e:
            print(f"üîß [ENGINEER] Error during implementation: {e}")
            return None
    
    async def safety_validation(self, modification: CodeModification) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        print("üõ°Ô∏è [SAFETY] Validating code modification...")
        
        try:
            # 1. –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            compile(modification.new_code, modification.original_file, 'exec')
            print("‚úÖ [SAFETY] Syntax validation passed")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            dangerous_patterns = [
                'os.system', 'subprocess.call', 'eval(', 'exec(',
                'open(', '__import__', 'delete', 'rm -rf'
            ]
            
            for pattern in dangerous_patterns:
                if pattern in modification.new_code:
                    print(f"‚ö†Ô∏è [SAFETY] Potentially dangerous operation detected: {pattern}")
                    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            
            # 3. –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if len(modification.new_code) > 10000:  # –ë–æ–ª–µ–µ 10–ö —Å—Ç—Ä–æ–∫
                print("‚ö†Ô∏è [SAFETY] Large modification detected, requires extra review")
            
            return True
            
        except SyntaxError as e:
            print(f"‚ùå [SAFETY] Syntax error in generated code: {e}")
            return False
        except Exception as e:
            print(f"‚ùå [SAFETY] Safety validation error: {e}")
            return False
    
    async def request_user_approval(self, modification: CodeModification) -> bool:
        """
        –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        print("\n" + "="*60)
        print("ü§ñ [AUTONOMOUS AGENT] REQUESTING MODIFICATION APPROVAL")
        print("="*60)
        print(f"üìÅ Target File: {modification.original_file}")
        print(f"üéØ Modification Type: {modification.modification_type}")
        print(f"üìù Summary: {modification.changes_summary}")
        print(f"üìà Expected Impact: {modification.estimated_impact:.1%} improvement")
        print(f"üî¢ New Code Lines: {len(modification.new_code.split(chr(10)))}")
        print("\nüìã PREVIEW OF CHANGES:")
        print("-" * 40)
        print(modification.new_code[:500] + "..." if len(modification.new_code) > 500 else modification.new_code)
        print("-" * 40)
        print("\nü§î Do you approve this autonomous improvement?")
        print("   ‚úÖ Type 'yes' to approve")
        print("   ‚ùå Type 'no' to reject")
        print("   üìã Type 'show' to see full code")
        
        while True:
            try:
                response = input("\nüéØ Your decision: ").strip().lower()
                
                if response in ['yes', 'y', 'approve']:
                    print("‚úÖ [APPROVED] User approved the modification")
                    return True
                elif response in ['no', 'n', 'reject']:
                    print("‚ùå [REJECTED] User rejected the modification")
                    return False
                elif response in ['show', 'full', 'preview']:
                    print("\n" + "="*60)
                    print("üìã FULL CODE PREVIEW:")
                    print("="*60)
                    print(modification.new_code)
                    print("="*60)
                else:
                    print("‚ùì Please respond with 'yes', 'no', or 'show'")
                    
            except KeyboardInterrupt:
                print("\nüõë [INTERRUPTED] Approval cancelled by user")
                return False
    
    async def apply_code_modification(self, modification: CodeModification) -> bool:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –±—ç–∫–∞–ø–æ–º
        """
        print(f"üîß [APPLYING] Applying modification to {modification.original_file}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = f"{modification.original_file}.backup_{int(time.time())}"
            shutil.copy2(modification.original_file, backup_path)
            print(f"üíæ [BACKUP] Created backup: {backup_path}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(modification.original_file, 'w', encoding='utf-8') as f:
                f.write(modification.new_code)
            
            print(f"‚úÖ [APPLIED] Successfully modified {modification.original_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            try:
                spec = importlib.util.spec_from_file_location("test_module", modification.original_file)
                module = importlib.util.module_from_spec(spec)
                # –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º spec.loader.exec_module(module) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                print("‚úÖ [VALIDATED] File structure is valid")
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è [WARNING] Import validation failed: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
                shutil.copy2(backup_path, modification.original_file)
                print(f"üîÑ [RESTORED] Restored from backup due to validation failure")
                return False
                
        except Exception as e:
            print(f"‚ùå [ERROR] Failed to apply modification: {e}")
            return False
    
    async def analyze_improvement_results(self):
        """
        –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è
        """
        print("üìä [ANALYSIS] Analyzing improvement results...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        new_metrics = await self.collect_performance_data()
        
        print(f"üéâ [RESULTS] System Evolution Report:")
        print(f"   üîß Improvements Made: {self.improvements_made}")
        print(f"   üìù Total Code Changes: {self.total_code_changes} lines")
        print(f"   üìà Evolution Level: {self.system_evolution_level:.1f}")
        print(f"   üß† Intelligence Gain: {self.system_evolution_level * 10:.1f}%")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def gather_system_metrics(self) -> Dict:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        import psutil
        return {
            "cpu_percent": psutil.cpu_percent(interval=1),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('.').percent
        }
    
    async def analyze_current_codebase(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã"""
        return {
            "total_files": 12,
            "total_lines": 1943,
            "complexity_score": 7.5
        }
    
    async def collect_performance_data(self) -> Dict:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            "average_response_time": 0.5,
            "success_rate": 0.95,
            "error_count": 2
        }
    
    async def create_engineering_task(self, analysis: StrategicAnalysis) -> EngineeringTask:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        return EngineeringTask(
            task_id=f"task_{int(time.time())}",
            target_file=analysis.target_module,
            current_code_analysis=analysis.problem_description,
            improvement_requirements=analysis.improvement_goal,
            constraints=["maintain_api_compatibility", "preserve_functionality"],
            expected_outcome=analysis.expected_benefit
        )
    
    async def call_ollama(self, model: str, prompt: str, temperature: float = 0.3, max_tokens: int = 2000) -> str:
        """–í—ã–∑–æ–≤ Ollama API"""
        try:
            payload = {
                "model": model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": temperature,
                    "num_predict": max_tokens
                }
            }
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
            )
            
            if response.status_code == 200:
                return response.json().get("response", "")
            else:
                print(f"‚ùå [OLLAMA] API error: {response.status_code}")
                return ""
                
        except Exception as e:
            print(f"‚ùå [OLLAMA] Error: {e}")
            return ""

class DualBrainLogAnalyzer:
    def __init__(self):
        self.insights = []
        self.running = False
        self.thread = None

    def start(self):
        if not self.running:
            self.running = True
            self.thread = threading.Thread(target=self.analyze_loop, daemon=True)
            self.thread.start()
            log_event('DualBrainLogAnalyzer started')

    def stop(self):
        self.running = False
        log_event('DualBrainLogAnalyzer stopped')

    def analyze_loop(self):
        while self.running:
            log_lines = swarm_logger.get_recent_events(200)
            new_insights = self.analyze_log(log_lines)
            if new_insights:
                self.insights.extend(new_insights)
            time.sleep(30)

    def analyze_log(self, log_lines):
        insights = []
        # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
        error_count = sum(1 for l in log_lines if 'ERROR' in l)
        if error_count > 0:
            insights.append(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–±—ã—Ç–∏–π: {error_count}')
        # –ü—Ä–∏–º–µ—Ä: –∏—â–µ–º —Ä–æ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        intelligence_events = [l for l in log_lines if 'intelligence=' in l]
        if intelligence_events:
            last = intelligence_events[-1]
            insights.append(f'–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: {last.strip()}')
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫—É
        return insights

    def get_insights(self, n=10):
        return self.insights[-n:]

# üåü –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö

async def start_autonomous_evolution():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ —Å –¥–≤—É–º—è –º–æ–∑–≥–∞–º–∏"""
    print("üß†üß† [DUAL-BRAIN] ACTIVATING AUTONOMOUS EVOLUTION PROTOCOL!")
    print("‚ö° [WARNING] System will modify its own code!")
    print("üéØ [STRATEGIST] High-level reasoning brain online")
    print("üîß [ENGINEER] Elite coding brain online - NO LIMITATIONS")
    
    architect = DualBrainArchitect()
    
    evolution_cycles = 0
    max_cycles = 10  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ
    
    while evolution_cycles < max_cycles:
        print(f"\nüß¨ [CYCLE {evolution_cycles + 1}] Starting evolution cycle...")
        
        success = await architect.run_autonomous_evolution_cycle()
        
        if success:
            print(f"üéâ [CYCLE {evolution_cycles + 1}] Evolution successful!")
            evolution_cycles += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            print("‚è±Ô∏è [PAUSE] Waiting 30 seconds before next evolution...")
            await asyncio.sleep(30)
        else:
            print(f"‚ùå [CYCLE {evolution_cycles + 1}] Evolution failed, retrying in 60 seconds...")
            await asyncio.sleep(60)
    
    print(f"\nüèÜ [COMPLETE] Completed {evolution_cycles} evolution cycles!")
    print(f"üß¨ [STATUS] System has evolved to level {architect.system_evolution_level:.1f}")

def create_dual_brain_architect():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö–º–æ–∑–≥–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("üß†üß† [FACTORY] Creating dual-brain architect...")
    print("üöÄ [STATUS] Ready for autonomous code evolution!")
    return DualBrainArchitect() 