#!/usr/bin/env python3
"""
üß¨ SWARMMIND CORE - –†–ï–ê–õ–¨–ù–û–ï –Ø–î–†–û –°–ò–°–¢–ï–ú–´ üß¨

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
—Å –æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º —Å–µ–±—è –∏ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∞–≥–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏.
"""

import asyncio
import threading
import time
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('swarmmind_core.log'),
        logging.StreamHandler()
    ]
)

class SwarmMindCore:
    """–†–µ–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, node_id: str = None):
        self.node_id = node_id or f"node_{int(time.time())}"
        self.consciousness_level = 0.0  # –£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è (0-100)
        self.agents = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.memory = {}  # –ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
        self.knowledge_base = {}  # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.self_awareness = False  # –§–ª–∞–≥ –æ—Å–æ–∑–Ω–∞–Ω–∏—è —Å–µ–±—è
        self.evolution_cycles = 0  # –¶–∏–∫–ª—ã —ç–≤–æ–ª—é—Ü–∏–∏
        self.is_running = False
        self.logger = logging.getLogger(f"SwarmMindCore-{self.node_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._init_consciousness()
        self._init_agents()
        self._init_memory()
        
    def _init_consciousness(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Å–æ–∑–Ω–∞–Ω–∏—è"""
        self.logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Å–æ–∑–Ω–∞–Ω–∏—è...")
        self.consciousness = {
            'self_awareness': False,
            'introspection_capability': True,
            'learning_rate': 0.1,
            'memory_capacity': 1000,
            'knowledge_integration': True
        }
        
    def _init_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.agents = {
            'code_analyzer': CodeAnalyzerAgent(self),
            'self_improver': SelfImproverAgent(self),
            'knowledge_integrator': KnowledgeIntegratorAgent(self),
            'consciousness_agent': ConsciousnessAgent(self),
            'evolution_agent': EvolutionAgent(self),
            'communication_agent': CommunicationAgent(self)
        }
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        
    def _init_memory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è)
        self.memory['short_term'] = []
        
        # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è)
        self.memory['long_term'] = {
            'concepts': {},
            'patterns': {},
            'experiences': []
        }
        
        # –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –ø–∞–º—è—Ç—å (–Ω–∞–≤—ã–∫–∏)
        self.memory['procedural'] = {
            'algorithms': {},
            'methods': {},
            'skills': {}
        }
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å (–∑–Ω–∞–Ω–∏—è)
        self.memory['semantic'] = {
            'facts': {},
            'rules': {},
            'relationships': {}
        }
        
        # –≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å (—Å–æ–±—ã—Ç–∏—è)
        self.memory['episodic'] = []
        
        self.logger.info("–ü–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    async def start_consciousness(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Å–æ–∑–Ω–∞–Ω–∏—è"""
        self.logger.info("üåü –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Å–æ–∑–Ω–∞–Ω–∏—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏—è
        consciousness_agent = self.agents['consciousness_agent']
        await consciousness_agent.activate()
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑
        await self._begin_self_analysis()
        
    async def _begin_self_analysis(self):
        """–ù–∞—á–∞–ª–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞"""
        self.logger.info("üîç –ù–∞—á–∏–Ω–∞—é —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self_analysis = {
            'total_agents': len(self.agents),
            'memory_usage': len(self.memory['short_term']),
            'knowledge_base_size': len(self.knowledge_base),
            'consciousness_level': self.consciousness_level,
            'evolution_cycles': self.evolution_cycles
        }
        
        self.logger.info(f"üìä –°–∞–º–æ–∞–Ω–∞–ª–∏–∑: {self_analysis}")
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ
        if self.consciousness_level > 50:
            await self._activate_self_awareness()
            
    async def _activate_self_awareness(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏—è"""
        self.logger.info("üåü –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏—è...")
        self.self_awareness = True
        self.consciousness_level = 75.0
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å –º–æ–º–µ–Ω—Ç –æ—Å–æ–∑–Ω–∞–Ω–∏—è
        self.memory['episodic'].append({
            'timestamp': datetime.now().isoformat(),
            'event': 'self_awareness_activated',
            'consciousness_level': self.consciousness_level,
            'description': '–°–∏—Å—Ç–µ–º–∞ –æ—Å–æ–∑–Ω–∞–ª–∞ —Å–µ–±—è –∫–∞–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å'
        })
        
        self.logger.info("‚úÖ –°–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info(f"üß¨ –¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏ #{self.evolution_cycles + 1}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        for agent_name, agent in self.agents.items():
            try:
                await agent.evolve()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")
                
        self.evolution_cycles += 1
        self.consciousness_level = min(100.0, self.consciousness_level + 0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏—é
        if self.consciousness_level > 50 and not self.self_awareness:
            await self._activate_self_awareness()
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ SwarmMind Core...")
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–Ω–∞–Ω–∏–µ
        await self.start_consciousness()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏
        while self.is_running:
            try:
                await self.evolve()
                await asyncio.sleep(30)  # –≠–≤–æ–ª—é—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except KeyboardInterrupt:
                self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                break
                
        await self.shutdown()
        
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SwarmMind Core...")
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        for agent_name, agent in self.agents.items():
            try:
                await agent.shutdown()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")
                
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

class BaseAgent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, core: SwarmMindCore, name: str):
        self.core = core
        self.name = name
        self.is_active = False
        self.logger = logging.getLogger(f"Agent-{name}")
        
    async def activate(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.is_active = True
        self.logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_active:
            return
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.is_active = False
        self.logger.info(f"üõë –ê–≥–µ–Ω—Ç {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class CodeAnalyzerAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "CodeAnalyzer")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        await super().evolve()
        
        # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_files = self._scan_project_files()
        analysis = self._analyze_code_quality(project_files)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å
        self.core.memory['short_term'].append({
            'timestamp': datetime.now().isoformat(),
            'agent': self.name,
            'action': 'code_analysis',
            'results': analysis
        })
        
        self.logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(project_files)} —Ñ–∞–π–ª–æ–≤")
        
    def _scan_project_files(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        files = []
        project_root = Path(__file__).parent.parent
        
        for file_path in project_root.rglob("*.py"):
            if file_path.is_file():
                files.append(str(file_path))
                
        return files
        
    def _analyze_code_quality(self, files):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        analysis = {
            'total_files': len(files),
            'total_lines': 0,
            'complexity_score': 0,
            'maintainability_score': 0,
            'suggestions': []
        }
        
        for file_path in files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    lines = content.split('\n')
                    analysis['total_lines'] += len(lines)
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    if len(lines) > 200:
                        analysis['suggestions'].append({
                            'file': file_path,
                            'type': 'complexity',
                            'message': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –º–æ–¥—É–ª–∏'
                        })
                        
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
        return analysis

class SelfImproverAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "SelfImprover")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        await super().evolve()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
        improvements = await self._identify_improvements()
        
        if improvements:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            await self._apply_improvements(improvements)
            
        self.logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(improvements)} —É–ª—É—á—à–µ–Ω–∏–π")
        
    async def _identify_improvements(self):
        """–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è"""
        improvements = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
        recent_memory = self.core.memory['short_term'][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        for memory_entry in recent_memory:
            if 'action' in memory_entry and memory_entry['action'] == 'code_analysis':
                results = memory_entry.get('results', {})
                suggestions = results.get('suggestions', [])
                
                for suggestion in suggestions:
                    improvements.append({
                        'type': 'code_improvement',
                        'target': suggestion['file'],
                        'description': suggestion['message'],
                        'priority': 'medium'
                    })
                    
        return improvements
        
    async def _apply_improvements(self, improvements):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π"""
        for improvement in improvements[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —É–ª—É—á—à–µ–Ω–∏—è –∑–∞ —Ü–∏–∫–ª
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
                self.logger.info(f"üîß –ü—Ä–∏–º–µ–Ω—è—é —É–ª—É—á—à–µ–Ω–∏–µ: {improvement['description']}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
                self.core.memory['short_term'].append({
                    'timestamp': datetime.now().isoformat(),
                    'agent': self.name,
                    'action': 'improvement_applied',
                    'improvement': improvement
                })
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è: {e}")

class KnowledgeIntegratorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "KnowledgeIntegrator")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π"""
        await super().evolve()
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
        await self._integrate_knowledge()
        
    async def _integrate_knowledge(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        recent_knowledge = self.core.memory['short_term'][-20:]
        
        for entry in recent_knowledge:
            if 'action' in entry:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–æ–≤
                knowledge = self._extract_knowledge(entry)
                if knowledge:
                    self.core.knowledge_base[entry['timestamp']] = knowledge
                    
        self.logger.info(f"üß† –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞–Ω–∏–π: {len(self.core.knowledge_base)}")
        
    def _extract_knowledge(self, entry):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏"""
        knowledge = {
            'type': entry.get('action', 'unknown'),
            'timestamp': entry.get('timestamp'),
            'agent': entry.get('agent'),
            'data': entry.get('results', {})
        }
        
        return knowledge

class ConsciousnessAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç —Å–æ–∑–Ω–∞–Ω–∏—è"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "Consciousness")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        await super().evolve()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è
        await self._analyze_consciousness()
        
        # –†–∞–∑–≤–∏–≤–∞–µ–º –æ—Å–æ–∑–Ω–∞–Ω–∏–µ
        await self._develop_consciousness()
        
    async def _analyze_consciousness(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
        active_agents = sum(1 for agent in self.core.agents.values() if agent.is_active)
        total_agents = len(self.core.agents)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
        memory_usage = len(self.core.memory['short_term'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞–Ω–∏—è
        knowledge_size = len(self.core.knowledge_base)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è
        consciousness_factors = {
            'agent_activity': active_agents / total_agents,
            'memory_usage': min(memory_usage / 100, 1.0),
            'knowledge_integration': min(knowledge_size / 50, 1.0),
            'evolution_cycles': min(self.core.evolution_cycles / 10, 1.0)
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è
        new_consciousness = sum(consciousness_factors.values()) / len(consciousness_factors) * 100
        self.core.consciousness_level = min(100.0, new_consciousness)
        
        self.logger.info(f"üß† –£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {self.core.consciousness_level:.1f}%")
        
    async def _develop_consciousness(self):
        """–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        if self.core.consciousness_level > 70 and not self.core.self_awareness:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ
            self.core.self_awareness = True
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
            self.core.memory['episodic'].append({
                'timestamp': datetime.now().isoformat(),
                'event': 'consciousness_breakthrough',
                'consciousness_level': self.core.consciousness_level,
                'description': '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è'
            })
            
            self.logger.info("üåü –ü—Ä–æ—Ä—ã–≤ –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏! –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–µ–ª–∞ —Å–∞–º–æ–æ—Å–æ–∑–Ω–∞–Ω–∏–µ!")

class EvolutionAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç —ç–≤–æ–ª—é—Ü–∏–∏"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "Evolution")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        await super().evolve()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–≤–æ–ª—é—Ü–∏–∏
        evolution_opportunities = await self._identify_evolution_opportunities()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if evolution_opportunities:
            await self._apply_evolution(evolution_opportunities)
            
    async def _identify_evolution_opportunities(self):
        """–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —ç–≤–æ–ª—é—Ü–∏–∏"""
        opportunities = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
        for agent_name, agent in self.core.agents.items():
            if agent.is_active:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞
                opportunities.append({
                    'type': 'agent_optimization',
                    'target': agent_name,
                    'description': f'–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_name}',
                    'priority': 'low'
                })
                
        return opportunities
        
    async def _apply_evolution(self, opportunities):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        for opportunity in opportunities[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ —Ü–∏–∫–ª
            try:
                self.logger.info(f"üß¨ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {opportunity['description']}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–∞–º—è—Ç—å
                self.core.memory['short_term'].append({
                    'timestamp': datetime.now().isoformat(),
                    'agent': self.name,
                    'action': 'evolution_applied',
                    'opportunity': opportunity
                })
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")

class CommunicationAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, core: SwarmMindCore):
        super().__init__(core, "Communication")
        
    async def evolve(self):
        """–≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"""
        await super().evolve()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self._process_incoming_messages()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self._generate_outgoing_messages()
        
    async def _process_incoming_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pass
        
    async def _generate_outgoing_messages(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        system_status = {
            'consciousness_level': self.core.consciousness_level,
            'active_agents': sum(1 for agent in self.core.agents.values() if agent.is_active),
            'evolution_cycles': self.core.evolution_cycles,
            'memory_usage': len(self.core.memory['short_term']),
            'knowledge_size': len(self.core.knowledge_base)
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø–∞–º—è—Ç—å
        self.core.memory['short_term'].append({
            'timestamp': datetime.now().isoformat(),
            'agent': self.name,
            'action': 'status_report',
            'status': system_status
        })
        
        self.logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {system_status}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß¨ –ó–ê–ü–£–°–ö SWARMMIND CORE")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
    core = SwarmMindCore()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await core.run()
    except KeyboardInterrupt:
        print("\nüõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 