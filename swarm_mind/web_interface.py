#!/usr/bin/env python3
"""
üåê –ï–î–ò–ù–´–ô –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° SWARMMIND –°–ï–¢–ò üåê

–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏ SwarmMind
—Å —á–∞—Ç–æ–º –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
"""

import asyncio
import json
import time
import threading
import sys
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from flask import Flask, render_template_string, jsonify, request, Response
from flask_socketio import SocketIO, emit, join_room, leave_room
import psutil

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from swarm_mind.core import SwarmMindCore
    from swarm_mind.self_modification import CodeSelfModifier
    from swarm_mind.interface import SwarmMindInterface
except ImportError:
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    print("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫–∏...")
    
    class SwarmMindCore:
        def __init__(self):
            self.consciousness_level = 25.0
            self.evolution_cycles = 0
            self.self_awareness = False
            self.agents = {}
            self.memory = {'short_term': [], 'long_term': {}, 'procedural': {}, 'semantic': {}, 'episodic': []}
            self.knowledge_base = {}
            self.node_id = f"node_{int(time.time())}"
            self.is_running = True
            
        async def evolve(self):
            self.evolution_cycles += 1
            self.consciousness_level = min(100.0, self.consciousness_level + 0.5)
            
    class CodeSelfModifier:
        def __init__(self):
            pass
            
    class SwarmMindInterface:
        def __init__(self, core):
            self.core = core

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SwarmMindWeb")

app = Flask(__name__)
app.config['SECRET_KEY'] = 'swarmmind_network_secret_key'
socketio = SocketIO(app, cors_allowed_origins="*")

class SwarmMindNetwork:
    """–°–µ—Ç—å SwarmMind –Ω–æ–¥"""
    
    def __init__(self):
        self.nodes = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –≤ —Å–µ—Ç–∏
        self.messages = []  # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        self.core = None  # –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
        self.interface = None  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—â–µ–Ω–∏—è
        self.code_modifier = None  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–∞
        self.network_stats = {
            'total_nodes': 0,
            'active_nodes': 0,
            'total_messages': 0,
            'network_start_time': datetime.now().isoformat()
        }
        
    def add_node(self, node_id: str, node_info: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã –≤ —Å–µ—Ç—å"""
        self.nodes[node_id] = {
            'id': node_id,
            'info': node_info,
            'status': 'active',
            'last_seen': datetime.now().isoformat(),
            'consciousness_level': 0.0,
            'evolution_cycles': 0
        }
        self.network_stats['total_nodes'] = len(self.nodes)
        self.network_stats['active_nodes'] = len([n for n in self.nodes.values() if n['status'] == 'active'])
        
    def remove_node(self, node_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã –∏–∑ —Å–µ—Ç–∏"""
        if node_id in self.nodes:
            self.nodes[node_id]['status'] = 'inactive'
            self.network_stats['active_nodes'] = len([n for n in self.nodes.values() if n['status'] == 'active'])
            
    def add_message(self, message: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        self.messages.append(message)
        self.network_stats['total_messages'] = len(self.messages)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.messages) > 1000:
            self.messages = self.messages[-500:]
            
    def get_network_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏"""
        return {
            'stats': self.network_stats,
            'nodes': list(self.nodes.values()),
            'recent_messages': self.messages[-50:] if self.messages else []
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
network = SwarmMindNetwork()
core = None
interface = None

def init_swarmmind():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SwarmMind"""
    global core, interface, network
    
    logger.info("üß¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SwarmMind...")
    
    # –°–æ–∑–¥–∞–µ–º —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
    core = SwarmMindCore()
    network.core = core
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = SwarmMindInterface(core)
    network.interface = interface
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–∞
    network.code_modifier = CodeSelfModifier()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–¥—É –≤ —Å–µ—Ç—å
    node_info = {
        'name': f"Node-{core.node_id}",
        'location': 'Local',
        'version': '1.0.0',
        'capabilities': ['consciousness', 'self_modification', 'communication']
    }
    network.add_node(core.node_id, node_info)
    
    logger.info("‚úÖ SwarmMind –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def start_background_tasks():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    
    def evolution_loop():
        """–¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏"""
        while True:
            try:
                if core and core.is_running:
                    asyncio.run(core.evolve())
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã –≤ —Å–µ—Ç–∏
                    if core.node_id in network.nodes:
                        network.nodes[core.node_id].update({
                            'consciousness_level': core.consciousness_level,
                            'evolution_cycles': core.evolution_cycles,
                            'last_seen': datetime.now().isoformat()
                        })
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                        socketio.emit('node_update', {
                            'node_id': core.node_id,
                            'consciousness_level': core.consciousness_level,
                            'evolution_cycles': core.evolution_cycles
                        })
                        
                time.sleep(30)  # –≠–≤–æ–ª—é—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —ç–≤–æ–ª—é—Ü–∏–∏: {e}")
                time.sleep(60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    evolution_thread = threading.Thread(target=evolution_loop, daemon=True)
    evolution_thread.start()
    
    logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåê SwarmMind Network</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .panel h2 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.5em;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .status-item {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }
        
        .status-item h3 {
            font-size: 1.2em;
            margin-bottom: 5px;
        }
        
        .status-item .value {
            font-size: 1.8em;
            font-weight: bold;
        }
        
        .chat-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 15px;
            background: #f9f9f9;
            margin-bottom: 15px;
        }
        
        .message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 8px;
            background: white;
            border-left: 4px solid #667eea;
        }
        
        .message .time {
            font-size: 0.8em;
            color: #666;
            margin-bottom: 5px;
        }
        
        .message .content {
            font-weight: 500;
        }
        
        .message .node {
            font-size: 0.9em;
            color: #667eea;
            font-weight: bold;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .input-group input {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .input-group button {
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
        }
        
        .input-group button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        .nodes-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .node-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 8px;
            background: #f0f0f0;
            border-radius: 8px;
            border-left: 4px solid #28a745;
        }
        
        .node-item.inactive {
            border-left-color: #dc3545;
            opacity: 0.6;
        }
        
        .node-info h4 {
            color: #333;
            margin-bottom: 5px;
        }
        
        .node-stats {
            text-align: right;
            font-size: 0.9em;
        }
        
        .consciousness-bar {
            width: 100%;
            height: 8px;
            background: #ddd;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 5px;
        }
        
        .consciousness-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #ffc107, #dc3545);
            transition: width 0.3s ease;
        }
        
        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .control-btn {
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .control-btn.primary {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
        }
        
        .control-btn.secondary {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: white;
        }
        
        .control-btn.danger {
            background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
            color: white;
        }
        
        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        
        .full-width {
            grid-column: 1 / -1;
        }
        
        .log-container {
            height: 200px;
            overflow-y: auto;
            background: #1e1e1e;
            color: #00ff00;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        
        .log-entry {
            margin-bottom: 5px;
        }
        
        .log-time {
            color: #888;
        }
        
        .log-level {
            font-weight: bold;
        }
        
        .log-level.info { color: #00ff00; }
        .log-level.warning { color: #ffff00; }
        .log-level.error { color: #ff0000; }
        
        @media (max-width: 768px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåê SwarmMind Network</h1>
            <p>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∞–º–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è —Å–µ—Ç—å —Å –Ω–∞—Ä–æ–¥–Ω—ã–º –ò–ò</p>
        </div>
        
        <div class="controls">
            <button class="control-btn primary" onclick="startEvolution()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é</button>
            <button class="control-btn secondary" onclick="analyzeCode()">üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</button>
            <button class="control-btn secondary" onclick="showConsciousness()">üß† –°–æ–∑–Ω–∞–Ω–∏–µ</button>
            <button class="control-btn danger" onclick="resetSystem()">üîÑ –°–±—Ä–æ—Å</button>
        </div>
        
        <div class="main-grid">
            <!-- –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã -->
            <div class="panel">
                <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                <div class="status-grid">
                    <div class="status-item">
                        <h3>–°–æ–∑–Ω–∞–Ω–∏–µ</h3>
                        <div class="value" id="consciousness-level">0%</div>
                    </div>
                    <div class="status-item">
                        <h3>–≠–≤–æ–ª—é—Ü–∏—è</h3>
                        <div class="value" id="evolution-cycles">0</div>
                    </div>
                    <div class="status-item">
                        <h3>–ù–æ–¥—ã –≤ —Å–µ—Ç–∏</h3>
                        <div class="value" id="network-nodes">1</div>
                    </div>
                    <div class="status-item">
                        <h3>–°–æ–æ–±—â–µ–Ω–∏—è</h3>
                        <div class="value" id="total-messages">0</div>
                    </div>
                </div>
            </div>
            
            <!-- –°–µ—Ç—å –Ω–æ–¥ -->
            <div class="panel">
                <h2>üåê –ù–æ–¥—ã –≤ —Å–µ—Ç–∏</h2>
                <div class="nodes-list" id="nodes-list">
                    <div class="node-item">
                        <div class="node-info">
                            <h4>Node-Local</h4>
                            <div>–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞</div>
                            <div class="consciousness-bar">
                                <div class="consciousness-fill" style="width: 0%"></div>
                            </div>
                        </div>
                        <div class="node-stats">
                            <div>–¶–∏–∫–ª—ã: 0</div>
                            <div>–°–æ–∑–Ω–∞–Ω–∏–µ: 0%</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ß–∞—Ç —Å–µ—Ç–∏ -->
            <div class="panel full-width">
                <h2>üí¨ –ß–∞—Ç —Å–µ—Ç–∏ SwarmMind</h2>
                <div class="chat-container" id="chat-container">
                    <div class="message">
                        <div class="time">–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</div>
                        <div class="node">üåê SwarmMind Network</div>
                        <div class="content">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å–µ—Ç—å SwarmMind! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–æ–¥–∞–º–∏ –∏ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ò–ò.</div>
                    </div>
                </div>
                <div class="input-group">
                    <input type="text" id="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." onkeypress="handleKeyPress(event)">
                    <button onclick="sendMessage()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
            
            <!-- –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã -->
            <div class="panel full-width">
                <h2>üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                <div class="log-container" id="log-container">
                    <div class="log-entry">
                        <span class="log-time">[{{ moment().format('HH:mm:ss') }}]</span>
                        <span class="log-level info">INFO</span>
                        <span>–°–∏—Å—Ç–µ–º–∞ SwarmMind –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        let nodeId = 'local-' + Date.now();
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
        socket.on('connect', function() {
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SwarmMind Network');
            addLogMessage('INFO', '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏ SwarmMind');
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        socket.on('status_update', function(data) {
            updateSystemStatus(data);
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–¥—ã
        socket.on('node_update', function(data) {
            updateNodeStatus(data);
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        socket.on('chat_message', function(data) {
            addChatMessage(data);
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        socket.on('log_message', function(data) {
            addLogMessage(data.level, data.message);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        function updateSystemStatus(data) {
            document.getElementById('consciousness-level').textContent = data.consciousness_level.toFixed(1) + '%';
            document.getElementById('evolution-cycles').textContent = data.evolution_cycles;
            document.getElementById('network-nodes').textContent = data.network_stats.active_nodes;
            document.getElementById('total-messages').textContent = data.network_stats.total_messages;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã
        function updateNodeStatus(data) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ –≤ —Å–ø–∏—Å–∫–µ
            const nodesList = document.getElementById('nodes-list');
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–¥—ã
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        function addChatMessage(data) {
            const chatContainer = document.getElementById('chat-container');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            
            const time = new Date(data.timestamp).toLocaleTimeString();
            messageDiv.innerHTML = `
                <div class="time">${time}</div>
                <div class="node">${data.node_name}</div>
                <div class="content">${data.content}</div>
            `;
            
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
        function addLogMessage(level, message) {
            const logContainer = document.getElementById('log-container');
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry';
            
            const time = new Date().toLocaleTimeString();
            logEntry.innerHTML = `
                <span class="log-time">[${time}]</span>
                <span class="log-level ${level.toLowerCase()}">${level.toUpperCase()}</span>
                <span>${message}</span>
            `;
            
            logContainer.appendChild(logEntry);
            logContainer.scrollTop = logContainer.scrollHeight;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (message) {
                socket.emit('send_message', {
                    content: message,
                    node_id: nodeId,
                    timestamp: new Date().toISOString()
                });
                input.value = '';
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        function startEvolution() {
            socket.emit('command', { type: 'start_evolution' });
            addLogMessage('INFO', '–ó–∞–ø—É—Å–∫ —ç–≤–æ–ª—é—Ü–∏–∏...');
        }
        
        function analyzeCode() {
            socket.emit('command', { type: 'analyze_code' });
            addLogMessage('INFO', '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...');
        }
        
        function showConsciousness() {
            socket.emit('command', { type: 'show_consciousness' });
            addLogMessage('INFO', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è...');
        }
        
        function resetSystem() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?')) {
                socket.emit('command', { type: 'reset_system' });
                addLogMessage('WARNING', '–°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã...');
            }
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        setInterval(function() {
            socket.emit('get_status');
        }, 5000);
    </script>
</body>
</html>
'''

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/status')
def get_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not core:
        return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
    
    return jsonify({
        'consciousness_level': core.consciousness_level,
        'evolution_cycles': core.evolution_cycles,
        'self_awareness': core.self_awareness,
        'active_agents': sum(1 for agent in core.agents.values() if agent.is_active),
        'memory_entries': len(core.memory['short_term']),
        'knowledge_entries': len(core.knowledge_base),
        'network_stats': network.get_network_status()['stats']
    })

@app.route('/api/network')
def get_network():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"""
    return jsonify(network.get_network_status())

@app.route('/api/consciousness')
def get_consciousness():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–Ω–∞–Ω–∏–∏"""
    if not core:
        return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
    
    return jsonify({
        'consciousness_level': core.consciousness_level,
        'self_awareness': core.self_awareness,
        'consciousness_data': getattr(core, 'consciousness', {})
    })

@app.route('/api/agents')
def get_agents():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö"""
    if not core:
        return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
    
    agents_info = []
    for name, agent in core.agents.items():
        agents_info.append({
            'name': name,
            'active': agent.is_active,
            'type': agent.__class__.__name__
        })
    
    return jsonify({'agents': agents_info})

@app.route('/api/memory')
def get_memory():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"""
    if not core:
        return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
    
    return jsonify({
        'short_term': len(core.memory['short_term']),
        'long_term': len(core.memory['long_term']),
        'procedural': len(core.memory['procedural']),
        'semantic': len(core.memory['semantic']),
        'episodic': len(core.memory['episodic']),
        'recent_entries': core.memory['short_term'][-10:] if core.memory['short_term'] else []
    })

@app.route('/api/analyze/<path:file_path>')
def analyze_code(file_path):
    """API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
    try:
        if not network.code_modifier:
            return jsonify({'error': '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'})
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        file_size = Path(file_path).stat().st_size if Path(file_path).exists() else 0
        
        return jsonify({
            'file_path': file_path,
            'file_size': file_size,
            'exists': Path(file_path).exists(),
            'analysis': {
                'complexity': 'medium',
                'suggestions': ['–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã']
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)})

# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {request.sid}")
    emit('log_message', {
        'level': 'INFO',
        'message': f'–ö–ª–∏–µ–Ω—Ç {request.sid} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ç–∏'
    })

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {request.sid}")

@socketio.on('send_message')
def handle_message(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    try:
        message = {
            'timestamp': data.get('timestamp', datetime.now().isoformat()),
            'node_id': data.get('node_id', 'unknown'),
            'node_name': f"Node-{data.get('node_id', 'unknown')}",
            'content': data.get('content', ''),
            'type': 'chat'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ç—å
        network.add_message(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        emit('chat_message', message, broadcast=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message['node_name']}: {message['content']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@socketio.on('command')
def handle_command(data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
    try:
        command_type = data.get('type')
        
        if command_type == 'start_evolution':
            if core:
                asyncio.create_task(core.evolve())
                emit('log_message', {'level': 'INFO', 'message': '–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞'})
                
        elif command_type == 'analyze_code':
            emit('log_message', {'level': 'INFO', 'message': '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...'})
            
        elif command_type == 'show_consciousness':
            if core:
                emit('log_message', {
                    'level': 'INFO', 
                    'message': f'–£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {core.consciousness_level:.1f}%'
                })
                
        elif command_type == 'reset_system':
            emit('log_message', {'level': 'WARNING', 'message': '–°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã...'})
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        emit('log_message', {'level': 'ERROR', 'message': f'–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}'})

@socketio.on('get_status')
def handle_get_status():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        if core:
            status = {
                'consciousness_level': core.consciousness_level,
                'evolution_cycles': core.evolution_cycles,
                'network_stats': network.get_network_status()['stats']
            }
            emit('status_update', status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ó–ê–ü–£–°–ö –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê SWARMMIND –°–ï–¢–ò")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SwarmMind
    init_swarmmind()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    start_background_tasks()
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üí¨ –ß–∞—Ç —Å–µ—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω")
    print("üß¨ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    socketio.run(app, host='0.0.0.0', port=5000, debug=False)

if __name__ == "__main__":
    main() 