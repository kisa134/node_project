#!/usr/bin/env python3
"""
üîß –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê SWARMMIND üîß

–†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
–∏ –∫–æ–¥ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
"""

import ast
import astor
import os
import re
import shutil
import tempfile
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

class CodeSelfModifier:
    """–†–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path(__file__).parent.parent
        self.backup_dir = self.project_root / "backups"
        self.modifications_log = []
        self.logger = logging.getLogger("CodeSelfModifier")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_dir.mkdir(exist_ok=True)
        
    def create_backup(self, file_path: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
        try:
            source_path = Path(file_path)
            if not source_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"{source_path.stem}_{timestamp}{source_path.suffix}"
            backup_path = self.backup_dir / backup_name
            
            shutil.copy2(source_path, backup_path)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            return str(backup_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            raise
            
    def parse_code(self, file_path: str) -> ast.AST:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥–∞ –≤ AST"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            return ast.parse(content)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–¥–∞: {e}")
            raise
            
    def modify_function(self, file_path: str, function_name: str, new_code: str) -> bool:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self.create_backup(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = self.parse_code(file_path)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            modified = False
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef) and node.name == function_name:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
                    new_function_ast = ast.parse(new_code).body[0]
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é
                    node.body = new_function_ast.body
                    node.args = new_function_ast.args
                    node.returns = new_function_ast.returns
                    node.decorator_list = new_function_ast.decorator_list
                    
                    modified = True
                    break
                    
            if not modified:
                self.logger.warning(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {file_path}")
                return False
                
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
            modified_code = astor.to_source(tree)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(modified_code)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': file_path,
                'action': 'function_modification',
                'function': function_name,
                'backup': backup_path
            })
            
            self.logger.info(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {function_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False
            
    def add_function(self, file_path: str, function_code: str, position: str = "end") -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self.create_backup(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = self.parse_code(file_path)
            
            # –°–æ–∑–¥–∞–µ–º AST –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            new_function_ast = ast.parse(function_code).body[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            if position == "end":
                tree.body.append(new_function_ast)
            elif position == "beginning":
                tree.body.insert(0, new_function_ast)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                for i, node in enumerate(tree.body):
                    if isinstance(node, ast.FunctionDef) and node.name == position:
                        tree.body.insert(i + 1, new_function_ast)
                        break
                else:
                    tree.body.append(new_function_ast)
                    
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
            modified_code = astor.to_source(tree)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(modified_code)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': file_path,
                'action': 'function_addition',
                'function': new_function_ast.name,
                'backup': backup_path
            })
            
            self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {new_function_ast.name} –≤ {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False
            
    def add_class(self, file_path: str, class_code: str, position: str = "end") -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self.create_backup(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = self.parse_code(file_path)
            
            # –°–æ–∑–¥–∞–µ–º AST –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            new_class_ast = ast.parse(class_code).body[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            if position == "end":
                tree.body.append(new_class_ast)
            elif position == "beginning":
                tree.body.insert(0, new_class_ast)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                for i, node in enumerate(tree.body):
                    if isinstance(node, ast.ClassDef) and node.name == position:
                        tree.body.insert(i + 1, new_class_ast)
                        break
                else:
                    tree.body.append(new_class_ast)
                    
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
            modified_code = astor.to_source(tree)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(modified_code)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': file_path,
                'action': 'class_addition',
                'class': new_class_ast.name,
                'backup': backup_path
            })
            
            self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å {new_class_ast.name} –≤ {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞: {e}")
            return False
            
    def add_import(self, file_path: str, import_statement: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self.create_backup(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = self.parse_code(file_path)
            
            # –°–æ–∑–¥–∞–µ–º AST –∏–º–ø–æ—Ä—Ç–∞
            import_ast = ast.parse(import_statement).body[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            tree.body.insert(0, import_ast)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
            modified_code = astor.to_source(tree)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(modified_code)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': file_path,
                'action': 'import_addition',
                'import': import_statement,
                'backup': backup_path
            })
            
            self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
            
    def create_new_file(self, file_path: str, content: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            file_path = Path(file_path)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': str(file_path),
                'action': 'file_creation',
                'content_length': len(content)
            })
            
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
            
    def optimize_code(self, file_path: str) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = self.create_backup(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥
            tree = self.parse_code(file_path)
            
            optimizations = {
                'removed_unused_imports': 0,
                'simplified_expressions': 0,
                'improved_variable_names': 0
            }
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            optimizations['removed_unused_imports'] = self._remove_unused_imports(tree)
            
            # –£–ø—Ä–æ—â–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            optimizations['simplified_expressions'] = self._simplify_expressions(tree)
            
            # –£–ª—É—á—à–∞–µ–º –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            optimizations['improved_variable_names'] = self._improve_variable_names(tree)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            optimized_code = astor.to_source(tree)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(optimized_code)
                
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            self.modifications_log.append({
                'timestamp': datetime.now().isoformat(),
                'file': file_path,
                'action': 'code_optimization',
                'optimizations': optimizations,
                'backup': backup_path
            })
            
            self.logger.info(f"‚úÖ –ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {optimizations}")
            return optimizations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return {}
            
    def _remove_unused_imports(self, tree: ast.AST) -> int:
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        removed_count = 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        for node in ast.walk(tree):
            if isinstance(node, ast.Import) or isinstance(node, ast.ImportFrom):
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                pass
                
        return removed_count
        
    def _simplify_expressions(self, tree: ast.AST) -> int:
        """–£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        simplified_count = 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        for node in ast.walk(tree):
            if isinstance(node, ast.BinOp):
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                pass
                
        return simplified_count
        
    def _improve_variable_names(self, tree: ast.AST) -> int:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        improved_count = 0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        for node in ast.walk(tree):
            if isinstance(node, ast.Name):
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–º–µ–Ω
                pass
                
        return improved_count
        
    def get_modifications_log(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        return self.modifications_log
        
    def revert_last_modification(self) -> bool:
        """–û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if not self.modifications_log:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            return False
            
        last_modification = self.modifications_log[-1]
        backup_path = last_modification.get('backup')
        
        if not backup_path or not os.path.exists(backup_path):
            self.logger.error("‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –±—ç–∫–∞–ø–∞
            file_path = last_modification['file']
            shutil.copy2(backup_path, file_path)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ª–æ–≥–∞
            self.modifications_log.pop()
            
            self.logger.info(f"‚úÖ –û—Ç–∫–∞—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {file_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    modifier = CodeSelfModifier()
    
    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    new_function = '''
def test_self_modification():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–º–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    print("üß¨ –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–æ–π —Å–∞–º–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è!")
    return "success"
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    current_file = __file__
    success = modifier.add_function(current_file, new_function)
    
    if success:
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏") 